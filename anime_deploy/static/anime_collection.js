document.addEventListener("DOMContentLoaded", () => {
    console.log("üî• [LOG]: –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!");

    // –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤–∫–ª—é—á–µ–Ω–∏—è –æ—Ç–ª–∞–¥–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
    let debugMode = false;
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    function debugLog(...args) {
        if (debugMode) {
            console.log('[DEBUG]', ...args);
        }
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –æ—Ç–ª–∞–¥–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –ø–æ –Ω–∞–∂–∞—Ç–∏—é Ctrl+Shift+D
    document.addEventListener('keydown', function(e) {
        if (e.ctrlKey && e.shiftKey && e.key === 'D') {
            debugMode = !debugMode;
            if (debugMode) {
                console.log('üîß –û—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ä–µ–∂–∏–º –≤–∫–ª—é—á–µ–Ω');
                // –°–æ–∑–¥–∞–µ–º –ø–∞–Ω–µ–ª—å –æ—Ç–ª–∞–¥–∫–∏
                createDebugPanel();
            } else {
                console.log('üîß –û—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ä–µ–∂–∏–º –≤—ã–∫–ª—é—á–µ–Ω');
                // –£–¥–∞–ª—è–µ–º –ø–∞–Ω–µ–ª—å –æ—Ç–ª–∞–¥–∫–∏
                const debugPanel = document.querySelector('.debug-panel');
                if (debugPanel) debugPanel.remove();
            }
        }
    });
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–Ω–µ–ª–∏ –æ—Ç–ª–∞–¥–∫–∏
    function createDebugPanel() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ–∑–¥–∞–Ω–∞ –ª–∏ —É–∂–µ –ø–∞–Ω–µ–ª—å
        if (document.querySelector('.debug-panel')) return;
        
        // –°–æ–∑–¥–∞–µ–º –ø–∞–Ω–µ–ª—å
        const debugPanel = document.createElement('div');
        debugPanel.className = 'debug-panel';
        debugPanel.innerHTML = `
            <h3>–ü–∞–Ω–µ–ª—å –æ—Ç–ª–∞–¥–∫–∏</h3>
            <div class="debug-info">
                <div>–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∞–Ω–∏–º–µ: <span class="debug-loaded-count">0</span></div>
                <div>–¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: <span class="debug-current-page">1</span></div>
                <div>–ï—Å—Ç—å –µ—â–µ –¥–∞–Ω–Ω—ã–µ: <span class="debug-has-more">${hasMoreData ? '–î–∞' : '–ù–µ—Ç'}</span></div>
                <div>–¢–æ–∫–µ–Ω —Å–ª–µ–¥. —Å—Ç—Ä–∞–Ω–∏—Ü—ã: <span class="debug-next-token">${nextPageToken || '–ù–µ—Ç'}</span></div>
            </div>
            <div class="debug-actions">
                <button class="debug-reload">–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ</button>
                <button class="debug-next-page">–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞</button>
                <button class="debug-clear-cache">–û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à</button>
                <button class="debug-dump-data">–ü–æ–∫–∞–∑–∞—Ç—å –¥–∞–Ω–Ω—ã–µ</button>
            </div>
        `;
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –ø–∞–Ω–µ–ª–∏
        const debugStyles = document.createElement('style');
        debugStyles.textContent = `
            .debug-panel {
                position: fixed;
                bottom: 20px;
                left: 20px;
                width: 300px;
                background: rgba(20, 20, 20, 0.9);
                color: #ddd;
                padding: 15px;
                border-radius: 8px;
                border: 2px solid #f39c12;
                z-index: 9999;
                font-family: monospace;
                box-shadow: 0 0 20px rgba(0, 0, 0, 0.5);
                max-height: 80vh;
                overflow-y: auto;
            }
            .debug-panel h3 {
                margin-top: 0;
                color: #f39c12;
                text-align: center;
            }
            .debug-info {
                margin: 10px 0;
                font-size: 13px;
            }
            .debug-info div {
                margin: 5px 0;
            }
            .debug-actions {
                display: flex;
                flex-wrap: wrap;
                gap: 5px;
            }
            .debug-actions button {
                flex: 1 0 45%;
                background: #333;
                border: 1px solid #555;
                color: #ddd;
                padding: 5px;
                border-radius: 4px;
                cursor: pointer;
                font-size: 12px;
            }
            .debug-actions button:hover {
                background: #444;
            }
        `;
        document.head.appendChild(debugStyles);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–Ω–µ–ª—å –≤ DOM
        document.body.appendChild(debugPanel);
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
        document.querySelector('.debug-reload').addEventListener('click', () => {
            console.log('üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...');
            resetPaginationAndData();
            fetchAnime(1, false);
        });
        
        document.querySelector('.debug-next-page').addEventListener('click', () => {
            if (hasMoreData) {
                console.log(`üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É ${currentPage + 1}...`);
                fetchAnime(currentPage + 1, true);
            } else {
                console.log('‚ö†Ô∏è –ù–µ—Ç –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏');
            }
        });
        
        document.querySelector('.debug-clear-cache').addEventListener('click', () => {
            console.log('üßπ –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞...');
            // –û—á–∏—â–∞–µ–º –º–∞—Å—Å–∏–≤—ã –¥–∞–Ω–Ω—ã—Ö
            animeData = [];
            filteredData = [];
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
            currentPage = 1;
            hasMoreData = true;
            nextPageToken = null;
            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            fetchAnime(1, false);
        });
        
        document.querySelector('.debug-dump-data').addEventListener('click', () => {
            console.log('üìä –¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ:', {
                animeData: animeData.slice(0, 5) + '... –∏ –µ—â–µ ' + (animeData.length - 5) + ' —ç–ª–µ–º–µ–Ω—Ç–æ–≤',
                filteredData: filteredData.slice(0, 5) + '... –∏ –µ—â–µ ' + (filteredData.length - 5) + ' —ç–ª–µ–º–µ–Ω—Ç–æ–≤',
                currentPage,
                hasMoreData,
                nextPageToken,
                isLoading,
                MAX_PAGES,
                MAX_ITEMS,
                API_TOTAL_ITEMS
            });
            
            // –í—ã–≤–æ–¥–∏–º –ø–µ—Ä–≤—ã–µ 3 —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            if (animeData.length > 0) {
                console.log('üìä –ü—Ä–∏–º–µ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö:', JSON.stringify(animeData.slice(0, 3), null, 2));
            }
        });
        
        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –ø–∞–Ω–µ–ª–∏
        function updateDebugPanel() {
            document.querySelector('.debug-loaded-count').textContent = animeData.length;
            document.querySelector('.debug-current-page').textContent = currentPage;
            document.querySelector('.debug-has-more').textContent = hasMoreData ? '–î–∞' : '–ù–µ—Ç';
            document.querySelector('.debug-next-token').textContent = nextPageToken ? '–ï—Å—Ç—å' : '–ù–µ—Ç';
        }
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
        setInterval(updateDebugPanel, 1000);
    }

    const animeList = document.getElementById("anime-list");
    const genreFilter = document.getElementById("genre");
    const ratingFilter = document.getElementById("rating");
    const completedCheckbox = document.getElementById("completed");
    const ongoingCheckbox = document.getElementById("ongoing");
    const searchInput = document.getElementById("search-input"); // –ò–∑–º–µ–Ω–µ–Ω–æ: –ø–æ–ª–µ –¥–ª—è –ø–æ–∏—Å–∫–∞
    const searchBtn = document.getElementById("search-btn"); // –ö–Ω–æ–ø–∫–∞ –ø–æ–∏—Å–∫–∞

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö DOM-—ç–ª–µ–º–µ–Ω—Ç–æ–≤
    if (!animeList) {
        console.error("‚ùå –û—à–∏–±–∫–∞! –≠–ª–µ–º–µ–Ω—Ç #anime-list –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ.");
        return;
    }

    // –≠–ª–µ–º–µ–Ω—Ç—ã —Å—Ç–∞—Ç—É—Å-–±–∞—Ä–∞
    const statusText = document.querySelector('.status-text');
    const progressFilled = document.querySelector('.progress-filled');

    // –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ –∞–Ω–∏–º–µ –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    addAnimeCardStyles();

    // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏
    const progressElement = document.createElement('div');
    progressElement.className = 'load-progress';
    progressElement.innerHTML = `
        <div class="progress-info">
            <span class="loaded-count">0</span>/<span class="total-count">0</span> –∞–Ω–∏–º–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
        </div>
        <div class="progress-status">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
    `;

    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    const progressStyle = document.createElement('style');
    progressStyle.textContent = `
        .load-progress {
            position: fixed;
            bottom: 20px;
            right: 20px;
            background: rgba(26, 26, 26, 0.9);
            color: white;
            padding: 10px 15px;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.3);
            z-index: 1000;
            font-size: 14px;
            border: 1px solid var(--accent-orange);
        }
        .progress-info {
            margin-bottom: 5px;
            text-align: center;
        }
        .progress-status {
            font-size: 12px;
            text-align: center;
            color: var(--accent-orange);
        }
        .loaded-count, .total-count {
            font-weight: bold;
        }
    `;
    document.head.appendChild(progressStyle);
    document.body.appendChild(progressElement);

    // üî• –í—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π API-–∫–ª—é—á –∏–∑ Kodik
    const API_KEY = "447d179e875efe44217f20d1ee2146be";

    if (!API_KEY) {
        console.error("‚ùå –û—à–∏–±–∫–∞! –ù–µ –Ω–∞–π–¥–µ–Ω API –∫–ª—é—á Kodik.");
        animeList.innerHTML = `<p style="color: red;">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–Ω–∏–º–µ! (–ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω)</p>`;
        return;
    }

    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Å–∫—Ä–æ–ª–ª–∞
    let currentPage = 1;
    let isLoading = false;
    let hasMoreData = true;
    let animeData = []; // –í—Å–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    let filteredData = []; // –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    let MAX_PAGES = 40; // –ù–∞—á–∞–ª—å–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–∞–Ω–∏—Ü
    let MAX_ITEMS = 2000; // –ù–∞—á–∞–ª—å–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    let API_TOTAL_ITEMS = null; // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ –¥–∞–Ω–Ω—ã–º API

    // –ù–∞—á–∞–ª—å–Ω—ã–π —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫
    window.apiAttemptCount = 0;
    window.firstApiAttemptFailed = false;

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω—ã —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    let nextPageToken = null;

    // –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏ —Å—Ç–∞—Ç—É—Å-–±–∞—Ä–∞
    function updateProgressIndicator(loaded, maxItems, status = "–ó–∞–≥—Ä—É–∑–∫–∞...") {
        const loadedCountElement = document.querySelector('.loaded-count');
        const totalCountElement = document.querySelector('.total-count');
        const statusElement = document.querySelector('.progress-status');
        
        if (loadedCountElement && totalCountElement && statusElement) {
            loadedCountElement.textContent = loaded;
            totalCountElement.textContent = maxItems;
            statusElement.textContent = status;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å-–±–∞—Ä
        if (statusText) {
            statusText.textContent = status;
            
            // –ï—Å–ª–∏ –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –æ—Ç API, –¥–æ–±–∞–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
            if (API_TOTAL_ITEMS !== null) {
                const statusProgress = document.querySelector('.status-progress') || document.createElement('div');
                statusProgress.className = 'status-progress';
                statusProgress.textContent = `${loaded} –∏–∑ ${API_TOTAL_ITEMS} –∞–Ω–∏–º–µ`;
                
                // –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
                if (!document.querySelector('.status-progress')) {
                    const statusContainer = document.querySelector('.status-container');
                    if (statusContainer) {
                        statusContainer.insertBefore(statusProgress, document.querySelector('.progress-bar'));
                    }
                }
            }
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        if (progressFilled) {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ API –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞, –µ—Å–ª–∏ –æ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–æ
            const totalForProgress = API_TOTAL_ITEMS !== null ? API_TOTAL_ITEMS : maxItems;
            const progressPercent = Math.min((loaded / totalForProgress) * 100, 100);
            progressFilled.style.width = `${progressPercent}%`;
        }
    }

    // üì° –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Å —É—á–µ—Ç–æ–º –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∏ –ø–æ–∏—Å–∫–∞
    function getApiUrl(page = 1, nextPageToken = null, searchQuery = null) {
        // –î–ª—è –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å (–≤–∞–∂–Ω–æ: —É –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ API –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥—Ä—É–≥–æ–µ –Ω–∞—á–∞–ª–æ –ø—É—Ç–∏)
        if (page === 1 && window.location.pathname.startsWith('/admin/')) {
            return '/api/anime/';
        }
        
        // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω —Ç–æ–∫–µ–Ω —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        if (nextPageToken) {
            // –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –∫ —Ç–æ–∫–µ–Ω—É
            if (searchQuery) {
                return `${nextPageToken}&title=${encodeURIComponent(searchQuery)}`;
            }
            return nextPageToken;
        }
        
        // –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ Kodik —Å –±–∞–∑–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        const limit = 50; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
        const offset = (page - 1) * limit;
        
        // –ù–∞—á–∏–Ω–∞–µ–º —Å –±–∞–∑–æ–≤–æ–≥–æ URL
        let url = `https://kodikapi.com/list?token=${API_KEY}&types=anime-serial,anime&limit=${limit}&offset=${offset}`;
        
        // –î–æ–±–∞–≤–ª—è–µ–º material_data —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
        if (!window.firstApiAttemptFailed) {
            url += '&with_material_data=true';
        }
        
        // –≠—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è –∏–ª–∏ –≤—Ç–æ—Ä–∞—è –ø–æ–ø—ã—Ç–∫–∞
        if (!window.apiAttemptCount || window.apiAttemptCount <= 2) {
            // –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            url += '&with_pagination=true';
        }
        
        // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –∫ URL
        if (searchQuery) {
            // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            url += `&title=${encodeURIComponent(searchQuery)}`;
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤–∞–∂–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞
            url += '&full_match=false'; // –ò—â–µ–º —á–∞—Å—Ç–∏—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
            url += '&with_material_data=true'; // –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ç–µ—Ä–∏–∞–ª–µ
            
            // –ï—Å–ª–∏ –¥–ª–∏–Ω–∞ –∑–∞–ø—Ä–æ—Å–∞ –±–æ–ª–µ–µ 5 —Å–∏–º–≤–æ–ª–æ–≤, —É—Å—Ç–∞–Ω–æ–≤–∏–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ç–æ—á–Ω–æ—Å—Ç–∏
            if (searchQuery.length > 5) {
                url += '&min_relevance=0.2'; // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
            }
            
            // –ò—â–µ–º —Ç–∞–∫–∂–µ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏—è—Ö
            url += `&title_orig=${encodeURIComponent(searchQuery)}`;
            
            // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–∏—Ä–∏–ª–ª–∏—Ü–µ - –∏—â–µ–º –≤ —è–ø–æ–Ω—Å–∫–∏—Ö –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö –Ω–∞–∑–≤–∞–Ω–∏—è—Ö
            if (/[–∞-—è–ê-–Ø—ë–Å]/.test(searchQuery)) {
                url += `&translation=${encodeURIComponent(searchQuery)}`;
            }
            
            // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
            url += '&sort=relevance';
        }
        
        console.log(`üîé –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è "${searchQuery}"`);
        console.log(`üîó –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω URL API: ${url}`);
        
        return url;
    }
    
    // üöÄ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º JSONP –¥–ª—è –æ–±—Ö–æ–¥–∞ CORS
    function fetchAnimeWithJSONP(page = 1, append = false) {
        return new Promise((resolve, reject) => {
            try {
                // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
                const callbackName = 'jsonpCallback_' + Math.random().toString(36).substring(2, 15);
                
                // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏
                window[callbackName] = function(data) {
                    // –£–¥–∞–ª—è–µ–º —Å–∫—Ä–∏–ø—Ç –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                    if (script.parentNode) script.parentNode.removeChild(script);
                    // –£–¥–∞–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
                    delete window[callbackName];
                    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                    resolve(data);
                };
                
                // –§–æ—Ä–º–∏—Ä—É–µ–º URL —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º callback
                const apiUrl = getApiUrl(page) + `&callback=${callbackName}`;
                
                // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å–∫—Ä–∏–ø—Ç–∞
                const script = document.createElement('script');
                script.src = apiUrl;
                script.onerror = function() {
                    // –£–¥–∞–ª—è–µ–º —Å–∫—Ä–∏–ø—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ
                    if (script.parentNode) script.parentNode.removeChild(script);
                    // –£–¥–∞–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
                    delete window[callbackName];
                    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
                    reject(new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ JSONP'));
                };
                
                // –î–æ–±–∞–≤–ª—è–µ–º —Å–∫—Ä–∏–ø—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
                document.head.appendChild(script);
                
            } catch (error) {
                reject(error);
            }
        });
    }

    // üöÄ –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∞–Ω–∏–º–µ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    async function fetchAnime(page = 1, append = false) {
        try {
            if (isLoading || (!hasMoreData && append)) return;
            
            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫
            window.apiAttemptCount = (window.apiAttemptCount || 0) + 1;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏ –ª–∏–º–∏—Ç —Å—Ç—Ä–∞–Ω–∏—Ü
            if (page > MAX_PAGES) {
                console.log(`üì¢ –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü (${MAX_PAGES}). –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.`);
                hasMoreData = false;
                removeLoadingMore();
                updateProgressIndicator(animeData.length, MAX_ITEMS, "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ!");
                return;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏ –ª–∏–º–∏—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            if (animeData.length >= MAX_ITEMS) {
                console.log(`üì¢ –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (${MAX_ITEMS}). –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.`);
                hasMoreData = false;
                removeLoadingMore();
                updateProgressIndicator(animeData.length, MAX_ITEMS, "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–Ω–∏–º–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ!");
                return;
            }
            
            isLoading = true;
            updateProgressIndicator(animeData.length, MAX_ITEMS, `–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${page}...`);
            
            if (!append) {
                showLoading();
                // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–∏ –Ω–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
                nextPageToken = null;
            } else {
                showLoadingMore();
            }
            
            console.log(`üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ ${page})...`);
            
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞, –µ—Å–ª–∏ –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            const currentSearchQuery = searchInput ? searchInput.value.trim().toLowerCase() : '';
            const isSearchActive = currentSearchQuery.length >= 3;
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–∫–µ–Ω —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å, –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä –ø–æ–∏—Å–∫–∞ –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–µ–Ω –ø–æ–∏—Å–∫
            const apiUrl = getApiUrl(page, nextPageToken, isSearchActive ? currentSearchQuery : null);
            console.log(`üì° URL –∑–∞–ø—Ä–æ—Å–∞: ${apiUrl}`);
            
            let data;
            
            try {
                // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –æ–±—ã—á–Ω—ã–π fetch
                const response = await fetch(apiUrl);
                if (!response.ok) throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${response.status}`);
                data = await response.json();
            } catch (fetchError) {
                console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ fetch: ${fetchError.message}`);
                console.log(`üîÑ –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –∑–∞–≥—Ä—É–∑–∫–∏...`);
                
                try {
                    // –ï—Å–ª–∏ fetch –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º –º–µ—Ç–æ–¥ JSONP
                    data = await fetchAnimeWithJSONP(page, append);
                } catch (jsonpError) {
                    console.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ JSONP: ${jsonpError.message}`);
                    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∏ —á–µ—Ä–µ–∑ fetch, –Ω–∏ —á–µ—Ä–µ–∑ JSONP');
                }
            }
            
            // –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ API
            console.log(`üîç API –æ—Ç–≤–µ—Ç:`, {
                success: data.success,
                total: data.total,
                time: data.time,
                resultsCount: data.results ? data.results.length : 0
            });
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            if (!data.results || data.results.length === 0) {
                console.log("‚ö†Ô∏è API –Ω–µ –≤–µ—Ä–Ω—É–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. –ü—Ä–æ–±—É–µ–º –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç...");
                
                // –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ –ø–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å
                window.firstApiAttemptFailed = true;
                
                // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è –Ω–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞, –ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–æ–π –º–µ—Ç–æ–¥
                if (window.apiAttemptCount <= 3) {
                    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∑–∞–≥—Ä—É–∑–∫–∏
                    isLoading = false;
                    
                    // –ü—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞ —Å –¥—Ä—É–≥–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
                    console.log("üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å –¥—Ä—É–≥–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏...");
                    setTimeout(() => fetchAnime(page, append), 1000);
                    return;
                }
                
                // –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ —É–¥–∞–ª–∏—Å—å, —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
                if (animeData.length === 0) {
                    console.log("üîÑ –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ —É–¥–∞–ª–∏—Å—å. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...");
                    createTestAnimeCards();
                    hasMoreData = false;
                    isLoading = false;
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                    updateProgressIndicator(animeData.length, MAX_ITEMS, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ–∫–∞–∑–∞–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ.");
                    return;
                }
                
                // –î–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü –ø—Ä–æ—Å—Ç–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
                hasMoreData = false;
                removeLoadingMore();
                isLoading = false;
                updateProgressIndicator(animeData.length, MAX_ITEMS, "–ë–æ–ª—å—à–µ –∞–Ω–∏–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ");
                return;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ–±—ã –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –±—ã–ª–∏ –æ–±—ä–µ–∫—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
            const validResults = data.results.filter(item => item && (item.material_data || item.title));
            if (validResults.length === 0 && data.results.length > 0) {
                console.log("‚ö†Ô∏è API –≤–µ—Ä–Ω—É–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –Ω–æ –æ–Ω–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö:", data.results);
                animeList.innerHTML = "<p class='no-results'>–ü–æ–ª—É—á–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç API. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.</p>";
                isLoading = false;
                return;
            }
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ meta-–¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
            if (data.next_page !== undefined) {
                console.log(`üìÑ –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: ${data.next_page}`);
                nextPageToken = data.next_page; // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            }
            if (data.prev_page !== undefined) {
                console.log(`üìÑ –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: ${data.prev_page}`);
            }
            if (data.total !== undefined) {
                console.log(`üìä –í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ –¥–∞–Ω–Ω—ã–º API: ${data.total}`);
            }
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Å—Ç—Ä–∞–Ω–∏—Ü
            if (data.pages !== undefined) {
                console.log(`üìë –í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü –ø–æ –¥–∞–Ω–Ω—ã–º API: ${data.pages}`);
                if (data.pages < MAX_PAGES) {
                    MAX_PAGES = data.pages;
                    console.log(`üìë –û–±–Ω–æ–≤–ª–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü: ${MAX_PAGES}`);
                }
            }
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –≤ –±–æ–ª–µ–µ –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏ API
            if (data.pagination) {
                console.log(`üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏:`, data.pagination);
                
                if (data.pagination.total_items !== undefined) {
                    API_TOTAL_ITEMS = data.pagination.total_items;
                    console.log(`üìä –í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ –¥–∞–Ω–Ω—ã–º –ø–∞–≥–∏–Ω–∞—Ü–∏–∏: ${API_TOTAL_ITEMS}`);
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                    if (API_TOTAL_ITEMS < MAX_ITEMS) {
                        MAX_ITEMS = API_TOTAL_ITEMS;
                        console.log(`üìä –û–±–Ω–æ–≤–ª–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${MAX_ITEMS}`);
                    }
                }
                
                if (data.pagination.total_pages !== undefined) {
                    const apiTotalPages = data.pagination.total_pages;
                    console.log(`üìë –í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü –ø–æ –¥–∞–Ω–Ω—ã–º –ø–∞–≥–∏–Ω–∞—Ü–∏–∏: ${apiTotalPages}`);
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
                    if (apiTotalPages < MAX_PAGES) {
                        MAX_PAGES = apiTotalPages;
                        console.log(`üìë –û–±–Ω–æ–≤–ª–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü: ${MAX_PAGES}`);
                    }
                }
            }
            
            let newItems = [];
            
            if (data.success && data.results && data.results.length > 0) {
                // –§–æ—Ä–º–∞—Ç –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ API
                newItems = data.results.map(item => ({
                    id: item.id || item.link || '1',
                    material_data: {
                        title: item.title || "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è",
                        poster_url: item.poster_url || item.poster || '',
                        genres: item.genres || ['–ë–µ–∑ –∂–∞–Ω—Ä–∞'],
                        shikimori_rating: item.rating,
                        anime_status: item.status || 'released',
                        description: item.description || ''
                    }
                }));
            } else if (data.results && data.results.length > 0) {
                // –§–æ—Ä–º–∞—Ç –ø—Ä—è–º–æ–≥–æ API Kodik
                
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
                newItems = data.results.filter(item => !!item).map(item => {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ material_data
                    if (!item.material_data) {
                        // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –æ–±—ä–µ–∫—Ç, –µ—Å–ª–∏ material_data –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
                        return {
                            id: item.id || item.link || '1',
                            material_data: {
                                title: item.title || "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è",
                                poster_url: '',
                                genres: ['–ë–µ–∑ –∂–∞–Ω—Ä–∞'],
                                shikimori_rating: 0,
                                anime_status: 'released',
                                description: ''
                            }
                        };
                    }
                    return item;
                });
            } else {
                // –ï—Å–ª–∏ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –∑–Ω–∞—á–∏—Ç –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç
                hasMoreData = false;
                console.log("‚ö†Ô∏è –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–ª–∏ –∏–º–µ—é—Ç –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç:", data);
            }
            
            console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${newItems.length} —Ç–∞–π—Ç–ª–æ–≤`);
            
            // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–æ—Å—å, –∑–Ω–∞—á–∏—Ç –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç
            if (newItems.length === 0) {
                hasMoreData = false;
                removeLoadingMore();
                isLoading = false;
                updateProgressIndicator(animeData.length, MAX_ITEMS, "–ë–æ–ª—å—à–µ –∞–Ω–∏–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ");
                return;
            }
            
            // –ï—Å–ª–∏ API –≤–µ—Ä–Ω—É–ª –ø—Ä–∏–∑–Ω–∞–∫ –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
            if (data.next_page === null || data.next_page === false) {
                console.log("üì¢ API —Å–æ–æ–±—â–∏–ª, —á—Ç–æ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–µ—Ç. –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.");
                hasMoreData = false;
            }
            
            // –ï—Å–ª–∏ API –≤–µ—Ä–Ω—É–ª –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            if (data.total !== undefined && data.total > 0) {
                API_TOTAL_ITEMS = data.total;
                console.log(`üìä API —Å–æ–æ–±—â–∏–ª, —á—Ç–æ –≤—Å–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ ${API_TOTAL_ITEMS} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö API
                if (API_TOTAL_ITEMS < MAX_ITEMS) {
                    MAX_ITEMS = API_TOTAL_ITEMS;
                    console.log(`üìä –û–±–Ω–æ–≤–ª–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${MAX_ITEMS}`);
                }
                
                // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                const pageSize = 50; // –≠–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
                const calculatedMaxPages = Math.ceil(API_TOTAL_ITEMS / pageSize);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
                if (calculatedMaxPages < MAX_PAGES) {
                    MAX_PAGES = calculatedMaxPages;
                    console.log(`üìä –û–±–Ω–æ–≤–ª–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü: ${MAX_PAGES}`);
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å —É—á–µ—Ç–æ–º –Ω–æ–≤–æ–≥–æ –º–∞–∫—Å–∏–º—É–º–∞
                updateProgressIndicator(animeData.length, MAX_ITEMS, `–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${animeData.length} –∏–∑ ${MAX_ITEMS} –∞–Ω–∏–º–µ`);
            }
            
            // –°–æ–∑–¥–∞–µ–º Set —Å —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∞–Ω–∏–º–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
            const existingIDs = new Set();
            const existingTitles = new Set();
            const existingShikimoriIDs = new Set();
            
            if (append) {
                // –°–æ–±–∏—Ä–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∞–Ω–∏–º–µ
                animeData.forEach(item => {
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID
                    if (item.id) {
                        existingIDs.add(item.id.toString());
                    }
                    
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è
                    if (item.material_data && item.material_data.title) {
                        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ª—É—á—à–µ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                        const normalizedTitle = item.material_data.title
                            .toLowerCase()
                            .trim()
                            .replace(/\s+/g, ' ');  // –ó–∞–º–µ–Ω—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –æ–¥–∏–Ω
                        existingTitles.add(normalizedTitle);
                    }
                    
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º shikimori ID –µ—Å–ª–∏ –µ—Å—Ç—å
                    if (item.material_data && item.material_data.shikimori_id) {
                        existingShikimoriIDs.add(item.material_data.shikimori_id.toString());
                    }
                });
                
                console.log(`üìä –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ ${existingIDs.size} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö ID, ${existingTitles.size} –Ω–∞–∑–≤–∞–Ω–∏–π –∏ ${existingShikimoriIDs.size} Shikimori ID`);
            }
            
            // –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã, —á—Ç–æ–±—ã –∏—Å–∫–ª—é—á–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã
            const uniqueNewItems = newItems.filter(item => {
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ ID
                if (item.id && existingIDs.has(item.id.toString())) {
                    return false;
                }
                
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
                if (item.material_data && item.material_data.title) {
                    const normalizedTitle = item.material_data.title
                        .toLowerCase()
                        .trim()
                        .replace(/\s+/g, ' ');
                        
                    if (existingTitles.has(normalizedTitle)) {
                        return false;
                    }
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ Set –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
                    existingTitles.add(normalizedTitle);
                }
                
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ shikimori ID
                if (item.material_data && item.material_data.shikimori_id) {
                    const shikimoriID = item.material_data.shikimori_id.toString();
                    
                    if (existingShikimoriIDs.has(shikimoriID)) {
                        return false;
                    }
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º ID –≤ Set –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
                    existingShikimoriIDs.add(shikimoriID);
                }
                
                // –î–æ–±–∞–≤–ª—è–µ–º ID –≤ Set –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
                if (item.id) {
                    existingIDs.add(item.id.toString());
                }
                
                // –ï—Å–ª–∏ –ø—Ä–æ—à–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏, —Å—á–∏—Ç–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–º
                return true;
            });
            
            console.log(`üîç –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–∞–π—Ç–ª–æ–≤: ${uniqueNewItems.length} –∏–∑ ${newItems.length}`);
            
            // –ï—Å–ª–∏ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –≤–æ–∑–º–æ–∂–Ω–æ –º—ã –¥–æ—à–ª–∏ –¥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
            if (uniqueNewItems.length === 0) {
                console.log("‚ö†Ô∏è –ù–µ—Ç –Ω–æ–≤—ã—Ö —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–∞–π—Ç–ª–æ–≤. –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...");
                
                // –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ 5-—è –ø–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –±–µ–∑ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
                if (window.noUniqueAttemptsCount >= 5) {
                    console.log("‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –±–µ–∑ –Ω–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤. –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.");
                    hasMoreData = false;
                    removeLoadingMore();
                    isLoading = false;
                    updateProgressIndicator(animeData.length, MAX_ITEMS, "–ù–æ–≤—ã–µ –∞–Ω–∏–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã");
                    return;
                }
                
                // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ –±–µ–∑ –Ω–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                window.noUniqueAttemptsCount = (window.noUniqueAttemptsCount || 0) + 1;
                
                // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∑–∞–≥—Ä—É–∑–∫–∏
                isLoading = false;
                
                // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å–º–µ—â–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞
                const newPage = page + 5;
                
                if (newPage <= MAX_PAGES) {
                    console.log(`üîÑ –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É ${newPage} —Å–æ —Å–º–µ—â–µ–Ω–∏–µ–º...`);
                    
                    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —á–∏—Å–ª–æ–≤–æ–µ —Å–º–µ—â–µ–Ω–∏–µ
                    nextPageToken = null;
                    
                    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—É—é —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
                    currentPage = newPage - 1;
                    
                    // –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —Å–º–µ—â–µ–Ω–∏–µ–º
                    setTimeout(() => fetchAnime(newPage, true), 500);
                    return;
                } else {
                    // –ï—Å–ª–∏ –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç —Å—Ç—Ä–∞–Ω–∏—Ü, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
                    hasMoreData = false;
                    removeLoadingMore();
                    isLoading = false;
                    updateProgressIndicator(animeData.length, MAX_ITEMS, "–ù–æ–≤—ã–µ –∞–Ω–∏–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã");
                    return;
                }
            } else {
                // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ –±–µ–∑ –Ω–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –µ—Å–ª–∏ –∑–∞–≥—Ä—É–∑–∏–ª–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                window.noUniqueAttemptsCount = 0;
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∫ –æ–±—â–µ–º—É –º–∞—Å—Å–∏–≤—É
            if (append) {
                animeData = [...animeData, ...uniqueNewItems];
            } else {
                animeData = uniqueNewItems;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
            if (animeData.length >= MAX_ITEMS) {
                console.log(`üì¢ –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (${MAX_ITEMS}). –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.`);
                hasMoreData = false;
                updateProgressIndicator(animeData.length, MAX_ITEMS, "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–Ω–∏–º–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ!");
            } else {
                updateProgressIndicator(animeData.length, MAX_ITEMS, `–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${page} –∑–∞–≥—Ä—É–∂–µ–Ω–∞`);
            }
            
            // –í—ã–ø–æ–ª–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            filterAnime(append);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            currentPage = page;
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∑–∞–≥—Ä—É–∑–∫–∏
            isLoading = false;
            
            // –£–¥–∞–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            removeLoadingMore();
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∞–Ω–∏–º–µ
            console.log(`üìä –í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: ${animeData.length} –∏–∑ ${MAX_ITEMS} –∞–Ω–∏–º–µ`);
            
        } catch (error) {
            console.error("‚õî –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö!", error);
            
            if (!append) {
                animeList.innerHTML = `
                    <p style='color:red;'>‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.</p>
                `;
            } else {
                removeLoadingMore();
            }
            
            isLoading = false;
            hasMoreData = false;
            updateProgressIndicator(animeData.length, MAX_ITEMS, "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö!");
        }
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ (–ø–µ—Ä–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞)
    function showLoading() {
        animeList.innerHTML = `
            <div class="loading-indicator">
                <div class="loader"></div>
                <p>–ó–∞–≥—Ä—É–∂–∞–µ–º –∞–Ω–∏–º–µ...</p>
            </div>
        `;
    }
    
    // –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –¥–æ–∑–∞–≥—Ä—É–∑–∫–∏ (–±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Å–∫—Ä–æ–ª–ª)
    function showLoadingMore() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≥—Ä—É–∑–∫–∏
        if (document.querySelector('.loading-more')) return;
        
        const loadingMore = document.createElement('div');
        loadingMore.className = 'loading-more';
        loadingMore.innerHTML = `
            <div class="loader"></div>
            <p>–ó–∞–≥—Ä—É–∂–∞–µ–º –µ—â–µ...</p>
        `;
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
        const style = document.createElement('style');
        style.textContent = `
            .loading-more {
                display: flex;
                flex-direction: column;
                align-items: center;
                justify-content: center;
                padding: 20px;
                width: 100%;
                color: var(--text-light);
            }
            
            .loading-more .loader {
                width: 40px;
                height: 40px;
                border: 4px solid rgba(255, 107, 0, 0.2);
                border-radius: 50%;
                border-top-color: var(--accent-orange);
                animation: spin 1s ease-in-out infinite;
                margin-bottom: 10px;
            }
        `;
        document.head.appendChild(style);
        
        animeList.appendChild(loadingMore);
    }
    
    // üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Å–∫—Ä–æ–ª–ª–∞
    let scrollTimeout = null;
    let endMessageAdded = false;
    
    function handleInfiniteScroll() {
        // –ù–µ –ø–æ–¥–≥—Ä—É–∂–∞—Ç—å –Ω–æ–≤—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–µ–Ω –ø–æ–∏—Å–∫
        if (window.lastSearchQuery && window.lastSearchQuery.length >= 3) {
            return;
        }
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ—Å—Ç–∏–≥ –∫–æ–Ω—Ü–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        const scrollHeight = document.documentElement.scrollHeight;
        const scrollTop = document.documentElement.scrollTop || document.body.scrollTop;
        const clientHeight = document.documentElement.clientHeight;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏ –º—ã —É–∂–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–Ω–∏–º–µ –æ—Ç API
        if (API_TOTAL_ITEMS !== null && animeData.length >= API_TOTAL_ITEMS) {
            // –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–Ω–∏–º–µ, –±–æ–ª—å—à–µ –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ–º
            if (!endMessageAdded) {
                console.log(`üì¢ –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–Ω–∏–º–µ (${API_TOTAL_ITEMS}) –ø–æ –¥–∞–Ω–Ω—ã–º API.`);
                hasMoreData = false;
                addEndMessage(`–ó–∞–≥—Ä—É–∂–µ–Ω—ã –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞–Ω–∏–º–µ (${API_TOTAL_ITEMS}) –ø–æ –¥–∞–Ω–Ω—ã–º API!`);
            }
            return;
        }
        
        // –ï—Å–ª–∏ —Å–∫—Ä–æ–ª–ª –¥–æ—Å—Ç–∏–≥ –Ω–∏–∂–Ω–µ–π —á–∞—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (—Å –∑–∞–ø–∞—Å–æ–º 200px)
        if (scrollTop + clientHeight >= scrollHeight - 200) {
            // –ï—Å–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ–º –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∏ –µ—Å—Ç—å –µ—â–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
            if (!isLoading && hasMoreData) {
                // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã
                if (scrollTimeout) {
                    clearTimeout(scrollTimeout);
                }
                
                scrollTimeout = setTimeout(() => {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏ –ª–∏–º–∏—Ç —Å—Ç—Ä–∞–Ω–∏—Ü
                    if (currentPage >= MAX_PAGES) {
                        console.log(`üì¢ –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü (${MAX_PAGES}). –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.`);
                        hasMoreData = false;
                        if (!endMessageAdded) {
                            addEndMessage("–î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü!");
                        }
                        return;
                    }
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏ –ª–∏–º–∏—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                    if (animeData.length >= MAX_ITEMS) {
                        console.log(`üì¢ –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (${MAX_ITEMS}). –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.`);
                        hasMoreData = false;
                        if (!endMessageAdded) {
                            addEndMessage("–î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–Ω–∏–º–µ!");
                        }
                        return;
                    }
                    
                    console.log("‚è¨ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...");
                    fetchAnime(currentPage + 1, true);
                }, 300); // –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ 300 –º—Å –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            } else if (!hasMoreData && !endMessageAdded) {
                // –ï—Å–ª–∏ –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
                addEndMessage("–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –∫–æ–Ω—Ü–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∞–Ω–∏–º–µ!");
            }
        }
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∫–æ–Ω—Ü–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    function addEndMessage(message) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–æ –ª–∏ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if (endMessageAdded || document.querySelector('.end-message')) {
            return;
        }
        
        const endMessage = document.createElement('div');
        endMessage.className = 'end-message';
        endMessage.innerHTML = `
            <div class="end-message-content">
                <span class="emoji">üé¨</span>
                <p>${message}</p>
                <button class="scroll-to-top">–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–≤–µ—Ä—Ö</button>
            </div>
        `;
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
        const endMessageStyle = document.createElement('style');
        endMessageStyle.textContent = `
            .end-message {
                width: 100%;
                padding: 20px;
                margin-top: 30px;
                margin-bottom: 50px;
                text-align: center;
            }
            .end-message-content {
                background-color: rgba(26, 26, 26, 0.9);
                border: 2px solid var(--accent-orange);
                border-radius: 10px;
                padding: 20px;
                display: inline-block;
                max-width: 500px;
                box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
            }
            .end-message .emoji {
                font-size: 2em;
                display: block;
                margin-bottom: 10px;
            }
            .end-message p {
                font-size: 1.1em;
                color: white;
                margin: 10px 0;
            }
            .scroll-to-top {
                background-color: var(--accent-orange);
                color: white;
                border: none;
                padding: 8px 15px;
                border-radius: 5px;
                margin-top: 10px;
                cursor: pointer;
                font-weight: bold;
                transition: background-color 0.3s ease;
            }
            .scroll-to-top:hover {
                background-color: #ff8c2a;
            }
        `;
        document.head.appendChild(endMessageStyle);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞ –∞–Ω–∏–º–µ
        animeList.appendChild(endMessage);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–≤–µ—Ä—Ö"
        document.querySelector('.scroll-to-top').addEventListener('click', () => {
            window.scrollTo({
                top: 0,
                behavior: 'smooth'
            });
        });
        
        // –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ
        endMessageAdded = true;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é —É–¥–∞–ª–µ–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≥—Ä—É–∑–∫–∏, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∫–æ–Ω—Ü–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    function removeLoadingMore() {
        const loadingMore = document.querySelector('.loading-more');
        if (loadingMore) {
            loadingMore.remove();
        }
        
        // –ï—Å–ª–∏ –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
        if (!hasMoreData && !endMessageAdded) {
            addEndMessage("–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –∫–æ–Ω—Ü–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∞–Ω–∏–º–µ!");
        }
    }

    // üñº –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–ª–∏–∫ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞–Ω–∏–º–µ
    function renderAnime(data, append = false) {
        // –ï—Å–ª–∏ –Ω–µ —Ä–µ–∂–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è, –æ—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫
        if (!append) {
            animeList.innerHTML = "";
            endMessageAdded = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∫–æ–Ω—Ü–µ –ø—Ä–∏ –Ω–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
        } else {
            // –£–¥–∞–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
            removeLoadingMore();
            
            // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∫–æ–Ω—Ü–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏, –µ—Å–ª–∏ –µ—Å—Ç—å (—á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ –≤ –∫–æ–Ω—Ü–µ)
            const endMessage = document.querySelector('.end-message');
            if (endMessage) {
                endMessage.remove();
                endMessageAdded = false;
            }
        }
        
        // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if (!data || data.length === 0) {
            if (!append) {
                animeList.innerHTML = "<p class='no-results'>–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞.</p>";
                
                // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
                if (!document.querySelector('#no-results-style')) {
                    const style = document.createElement('style');
                    style.id = 'no-results-style';
                    style.textContent = `
                        .no-results {
                            text-align: center;
                            padding: 30px;
                            background: rgba(26, 26, 26, 0.9);
                            border: 1px solid var(--accent-orange);
                            border-radius: 10px;
                            color: #fff;
                            font-size: 18px;
                            margin: 40px auto;
                            max-width: 500px;
                        }
                    `;
                    document.head.appendChild(style);
                }
            }
            return;
        }
        
        // –ß—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è, —Å–æ–∑–¥–∞–µ–º Set –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
        const seenAnime = new Set();
        
        // –ï—Å–ª–∏ —ç—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ, –ø–æ–ª—É—á–∞–µ–º —É–∂–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–Ω—ã–µ –∞–Ω–∏–º–µ
        if (append) {
            document.querySelectorAll(".anime-card").forEach(card => {
                if (card.dataset.title) {
                    seenAnime.add(card.dataset.title.toLowerCase().trim());
                }
                
                // –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ–º ID –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                if (card.dataset.id) {
                    seenAnime.add(`id-${card.dataset.id}`);
                }
            });
        }

        // –°—á–µ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
        let addedCards = 0;
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–æ–º
        console.log(`üßê –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–æ–º: ${data.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
        const itemsWithErrors = data.filter(anime => !anime || !anime.material_data).length;
        if (itemsWithErrors > 0) {
            console.log(`‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ ${itemsWithErrors} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏`);
        }

        // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —ç–ª–µ–º–µ–Ω—Ç–∞–º –º–∞—Å—Å–∏–≤–∞ –¥–∞–Ω–Ω—ã—Ö
        data.forEach((anime, index) => {
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
            if (!anime || !anime.material_data) {
                console.log(`‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç #${index} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö:`, anime);
                
                // –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
                if (anime) {
                    console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞ #${index}`);
                    anime = {
                        id: anime.id || `temp-${index}`,
                        material_data: {
                            title: anime.title || "–ê–Ω–∏–º–µ –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è",
                            poster_url: anime.poster_url || anime.poster || '',
                            genres: anime.genres || ['–ë–µ–∑ –∂–∞–Ω—Ä–∞'],
                            shikimori_rating: anime.rating || 0,
                            anime_status: anime.status || 'released',
                            description: anime.description || ''
                        }
                    };
                } else {
                    return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                }
            }
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ ID
            const title = anime.material_data?.title || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∞–Ω–∏–º–µ";
            const id = anime.id || "";
            const animeKey = title.toLowerCase().trim();
            const idKey = `id-${id}`;
            
            if (seenAnime.has(animeKey) || seenAnime.has(idKey)) {
                console.log(`‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç: ${title}`);
                return;  // –ï—Å–ª–∏ —É–∂–µ –±—ã–ª —Ç–∞–∫–æ–π —Ç–∞–π—Ç–ª –∏–ª–∏ ID, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤ Set –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
            seenAnime.add(animeKey);
            if (id) seenAnime.add(idKey);

            const card = document.createElement("div");
            card.classList.add("anime-card");
            
            // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç–∞-–∞—Ç—Ä–∏–±—É—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
            card.dataset.title = title;
            card.dataset.id = id;
            
            let genresHTML = "";
            
            if (anime.material_data.genres && anime.material_data.genres.length > 0) {
                // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 2 –∂–∞–Ω—Ä–æ–≤ –∫–∞–∫ –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ
                genresHTML = anime.material_data.genres.slice(0, 2).map(genre => 
                    `<span class="genre-tag">${genre}</span>`
                ).join("");
            }
            
            const posterUrl = anime.material_data.poster_url || anime.poster_url || 
                             anime.material_data.poster || anime.poster || 
                             'https://via.placeholder.com/300x400/1a1a1a/f39c12?text=No+Image';
            
            // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ NaN
            let rating = '?';
            if (anime.material_data.shikimori_rating !== undefined && anime.material_data.shikimori_rating !== null) {
                // –ï—Å–ª–∏ —ç—Ç–æ —á–∏—Å–ª–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º toFixed
                if (typeof anime.material_data.shikimori_rating === 'number') {
                    rating = anime.material_data.shikimori_rating.toFixed(1);
                } else {
                    // –ü—Ä–æ–±—É–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —á–∏—Å–ª–æ
                    const numRating = Number(anime.material_data.shikimori_rating);
                    if (!isNaN(numRating)) {
                        rating = numRating.toFixed(1);
                    }
                }
            }
            
            const status = anime.material_data.anime_status === "ongoing" ? "–í –ø—Ä–æ—Ü–µ—Å—Å–µ" : "–ó–∞–≤–µ—Ä—à–µ–Ω–æ";
            const description = anime.material_data.description || "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç";
            
            card.innerHTML = `
                <div class="anime-poster">
                    <img src="${posterUrl}" alt="${title}" loading="lazy" onerror="this.src='https://via.placeholder.com/300x400/1a1a1a/f39c12?text=No+Image'">
                    <div class="rating rating-top-right">${rating}</div>
                    <div class="status ${anime.material_data.anime_status === "ongoing" ? "ongoing" : "released"}">${status}</div>
                </div>
                <div class="anime-info">
                    <h3 class="anime-title">${title}</h3>
                    <p class="anime-description">${description.substring(0, 60)}${description.length > 60 ? '...' : ''}</p>
                    <div class="genres-container">
                        ${genresHTML}
                    </div>
                    <a href="/anime/${encodeURIComponent(id)}/" class="watch-btn">–°–ú–û–¢–†–ï–¢–¨</a>
                </div>
            `;
            
            // –î–µ–ª–∞–µ–º –≤—Å—é –∫–∞—Ä—Ç–æ—á–∫—É –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ–π
            card.addEventListener('click', (e) => {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ "–°–º–æ—Ç—Ä–µ—Ç—å"
                if (e.target.classList.contains('watch-btn') || e.target.closest('.watch-btn')) {
                    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–±—ã—Ç–∏—è –µ—Å–ª–∏ –∫–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ
                    e.stopPropagation();
                    return;
                }
                window.location.href = `/anime/${encodeURIComponent(id)}/`;
            });
            
            animeList.appendChild(card);
            addedCards++;
        });
        
        // –ï—Å–ª–∏ –Ω–µ –¥–æ–±–∞–≤–∏–ª–æ—Å—å –Ω–∏ –æ–¥–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏, –≤–æ–∑–º–æ–∂–Ω–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã
        if (addedCards === 0) {
            if (!append) {
                console.log("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–∑ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.");
                animeList.innerHTML = "<p class='no-results'>–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å.</p>";
            } else {
                console.log("‚ö†Ô∏è –ù–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –Ω–æ–≤–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏. –í–æ–∑–º–æ–∂–Ω–æ, API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –¥–∞–Ω–Ω—ã–µ.");
                hasMoreData = false;
                addEndMessage("–ü–æ—Ö–æ–∂–µ, –±–æ–ª—å—à–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∞–Ω–∏–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ");
            }
        } else {
            console.log(`üìä –î–æ–±–∞–≤–ª–µ–Ω–æ ${addedCards} –∫–∞—Ä—Ç–æ—á–µ–∫ –∞–Ω–∏–º–µ`);
        }
    }

    // üéØ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ –∂–∞–Ω—Ä–∞–º, —Ä–µ–π—Ç–∏–Ω–≥—É –∏ —Å—Ç–∞—Ç—É—Å—É:
    function filterAnime(append = false) {
        if (animeData.length === 0) return;
        
        filteredData = [...animeData];
        console.log(`üîç –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è: –Ω–∞—á–∏–Ω–∞–µ–º —Å ${filteredData.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤`);

        // –î–æ–±–∞–≤–∏–º –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∂–∞–Ω—Ä—ã
        if (debugMode) {
            // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∂–∞–Ω—Ä—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            const allGenres = new Set();
            animeData.forEach(anime => {
                if (anime.material_data?.genres && Array.isArray(anime.material_data.genres)) {
                    anime.material_data.genres.forEach(genre => {
                        if (genre) allGenres.add(genre.toLowerCase());
                    });
                }
            });
            console.log('üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ –∂–∞–Ω—Ä—ã –≤ –¥–∞–Ω–Ω—ã—Ö:', [...allGenres].sort());
        }
        
        // –§–∏–ª—å—Ç—Ä –ø–æ –∂–∞–Ω—Ä—É
        if (genreFilter && genreFilter.value !== "all") {
            const selectedGenre = genreFilter.value.toLowerCase();
            console.log(`üîç –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∂–∞–Ω—Ä—É: "${selectedGenre}"`);
            
            // –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∂–∞–Ω—Ä–æ–≤
            const genreMap = {
                'action': ['—ç–∫—à–µ–Ω', '—ç–∫—à–Ω', '–±–æ–µ–≤–∏–∫', 'action', '–±–æ–µ–≤—ã–µ –∏—Å–∫—É—Å—Å—Ç–≤–∞', '–±–æ–µ–≤–∏–∫', '—Å—Ä–∞–∂–µ–Ω–∏—è'],
                'comedy': ['–∫–æ–º–µ–¥–∏—è', '—é–º–æ—Ä', 'comedy', '–∫–æ–º–µ–¥–∏–π–Ω—ã–π'],
                'drama': ['–¥—Ä–∞–º–∞', 'drama', '–¥—Ä–∞–º–∞—Ç–∏—á–µ—Å–∫–∏–π'],
                'fantasy': ['—Ñ—ç–Ω—Ç–µ–∑–∏', '—Ñ—ç–Ω—Ç—ç–∑–∏', 'fantasy', '—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞'],
                'horror': ['—É–∂–∞—Å—ã', '—Ö–æ—Ä—Ä–æ—Ä', 'horror', '—Å—Ç—Ä–∞—à–∏–ª–∫–∞'],
                // –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            };
            
            filteredData = filteredData.filter(anime => {
                if (!anime.material_data?.genres || !Array.isArray(anime.material_data.genres)) {
                    return false; // –£ –∞–Ω–∏–º–µ –Ω–µ—Ç –∂–∞–Ω—Ä–æ–≤
                }
                
                // –ï—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å –∫–∞—Ä—Ç–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∂–∞–Ω—Ä–∞
                if (genreMap[selectedGenre]) {
                    return anime.material_data.genres.some(genre => {
                        const lowerGenre = genre.toLowerCase();
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –∂–∞–Ω—Ä –∞–Ω–∏–º–µ –ª—é–±–æ–π –∏–∑ —Å–∏–Ω–æ–Ω–∏–º–æ–≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∂–∞–Ω—Ä–∞
                        return genreMap[selectedGenre].some(synonym => lowerGenre.includes(synonym));
                    });
                } else {
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫ —Å –≤–∫–ª—é—á–µ–Ω–∏–µ–º
                    return anime.material_data.genres.some(genre => 
                        genre.toLowerCase().includes(selectedGenre)
                    );
                }
            });
            
            console.log(`üîç –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –∂–∞–Ω—Ä—É: ${filteredData.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤`);
        }

        // –§–∏–ª—å—Ç—Ä –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É
        if (ratingFilter && ratingFilter.value === "high") {
            filteredData.sort((a, b) => {
                // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
                const ratingA = typeof a.material_data?.shikimori_rating === 'number'
                    ? a.material_data.shikimori_rating
                    : Number(a.material_data?.shikimori_rating) || 0;
                
                const ratingB = typeof b.material_data?.shikimori_rating === 'number'
                    ? b.material_data.shikimori_rating
                    : Number(b.material_data?.shikimori_rating) || 0;
                
                return ratingB - ratingA;
            });
        } else if (ratingFilter && ratingFilter.value === "low") {
            filteredData.sort((a, b) => {
                // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
                const ratingA = typeof a.material_data?.shikimori_rating === 'number'
                    ? a.material_data.shikimori_rating
                    : Number(a.material_data?.shikimori_rating) || 0;
                
                const ratingB = typeof b.material_data?.shikimori_rating === 'number'
                    ? b.material_data.shikimori_rating
                    : Number(b.material_data?.shikimori_rating) || 0;
                
                return ratingA - ratingB;
            });
        }

        // –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É
        if (completedCheckbox && ongoingCheckbox) {
            if (completedCheckbox.checked && !ongoingCheckbox.checked) {
                filteredData = filteredData.filter(anime => 
                    anime.material_data?.anime_status === "released"
                );
                console.log(`üîç –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Å—Ç–∞—Ç—É—Å—É (–∑–∞–≤–µ—Ä—à–µ–Ω–æ): ${filteredData.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤`);
            } else if (ongoingCheckbox.checked && !completedCheckbox.checked) {
                filteredData = filteredData.filter(anime => 
                    anime.material_data?.anime_status === "ongoing"
                );
                console.log(`üîç –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Å—Ç–∞—Ç—É—Å—É (–æ–Ω–≥–æ–∏–Ω–≥): ${filteredData.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤`);
            }
        }

        // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ–∏—Å–∫ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ù–ï –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º –ø–æ–∏—Å–∫–µ
        // (—Ç.–µ. –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —á–µ—Ä–µ–∑ searchFullCatalog –º—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç API)
        const searchQuery = searchInput ? searchInput.value.trim().toLowerCase() : '';
        const isGlobalSearch = window.lastSearchQuery && window.lastSearchQuery.length >= 3;
        
        console.log(`üîç –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∏—Å–∫–∞: –∑–∞–ø—Ä–æ—Å="${searchQuery}", –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫=${isGlobalSearch}`);
        
        if (searchQuery && !isGlobalSearch) {
            console.log(`üîç –ü—Ä–∏–º–µ–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ –∑–∞–ø—Ä–æ—Å—É "${searchQuery}"`);
            filteredData = filteredData.filter(anime => {
                const title = anime.material_data?.title?.toLowerCase() || "";
                const description = anime.material_data?.description?.toLowerCase() || "";
                return title.includes(searchQuery) || description.includes(searchQuery);
            });
            console.log(`üîç –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É: ${filteredData.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤`);
        } else if (isGlobalSearch) {
            console.log(`üîç –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é, —Ç.–∫. —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç API –ø–æ –∑–∞–ø—Ä–æ—Å—É "${window.lastSearchQuery}"`);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∞–Ω–∏–º–µ
        updateProgressIndicator(
            animeData.length, 
            MAX_ITEMS, 
            `–ù–∞–π–¥–µ–Ω–æ: ${filteredData.length} –∏–∑ ${animeData.length} –∞–Ω–∏–º–µ`
        );

        // –†–µ–Ω–¥–µ—Ä–∏–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        renderAnime(filteredData, append);
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞
    let searchTimeout;
    
    // –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
    function calculateRelevance(item, searchQuery) {
        const searchLower = searchQuery.toLowerCase();
        let score = 0;
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø–æ–ª—è—Ö
        const title = item.title || '';
        const titleOrig = item.title_orig || '';
        const otherTitle = item.other_title || '';
        const description = item.description || '';
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ material_data
        const materialData = item.material_data || {};
        const materialTitle = materialData.title || '';
        const animeTitle = materialData.anime_title || '';
        const titleEn = materialData.title_en || '';
        const otherTitles = materialData.other_titles || [];
        const otherTitlesEn = materialData.other_titles_en || [];
        const otherTitlesJp = materialData.other_titles_jp || [];
        const materialDescription = materialData.description || '';
        const animeDescription = materialData.anime_description || '';
        
        // DEBUG: –í—ã–≤–æ–¥–∏–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        console.log(`üîç –ê–Ω–∞–ª–∏–∑ –∞–Ω–∏–º–µ "${title || materialTitle}", –ø–æ–∏—Å–∫ "${searchLower}"`);
        console.log(`   –ó–∞–≥–æ–ª–æ–≤–∫–∏: "${title}", "${titleOrig}", "${otherTitle}", "${materialTitle}", "${animeTitle}", "${titleEn}"`);
        
        // –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ –ª—é–±–æ–º –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏–π
        if (title.toLowerCase() === searchLower || 
            titleOrig.toLowerCase() === searchLower || 
            otherTitle.toLowerCase() === searchLower ||
            materialTitle.toLowerCase() === searchLower ||
            animeTitle.toLowerCase() === searchLower ||
            titleEn.toLowerCase() === searchLower) {
            console.log(`‚úÖ –¢–û–ß–ù–û–ï —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –¥–ª—è "${title || materialTitle}"`);
            score += 1000; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤–µ—Å –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å—Ç—Ä–æ–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ –Ω–∞–∑–≤–∞–Ω–∏—è—Ö
        if (title.toLowerCase().includes(searchLower)) {
            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –≤ title: "${title}"`);
            score += 500;
        }
        if (titleOrig.toLowerCase().includes(searchLower)) {
            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –≤ titleOrig: "${titleOrig}"`);
            score += 400;
        }
        if (otherTitle.toLowerCase().includes(searchLower)) {
            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –≤ otherTitle: "${otherTitle}"`);
            score += 300;
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ material_data
        if (materialTitle.toLowerCase().includes(searchLower)) {
            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –≤ materialTitle: "${materialTitle}"`);
            score += 450;
        }
        if (animeTitle.toLowerCase().includes(searchLower)) {
            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –≤ animeTitle: "${animeTitle}"`);
            score += 350;
        }
        if (titleEn.toLowerCase().includes(searchLower)) {
            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –≤ titleEn: "${titleEn}"`);
            score += 250;
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ –º–∞—Å—Å–∏–≤–∞—Ö –¥—Ä—É–≥–∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π
        let foundInOtherTitles = false;
        for (const t of otherTitles) {
            if (t && t.toLowerCase().includes(searchLower)) {
                console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –≤ otherTitles: "${t}"`);
                score += 200;
                foundInOtherTitles = true;
                break;
            }
        }
        
        let foundInOtherTitlesEn = false;
        for (const t of otherTitlesEn) {
            if (t && t.toLowerCase().includes(searchLower)) {
                console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –≤ otherTitlesEn: "${t}"`);
                score += 150;
                foundInOtherTitlesEn = true;
                break;
            }
        }
        
        let foundInOtherTitlesJp = false;
        for (const t of otherTitlesJp) {
            if (t && t.toLowerCase().includes(searchLower)) {
                console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –≤ otherTitlesJp: "${t}"`);
                score += 100;
                foundInOtherTitlesJp = true;
                break;
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é —Å –º–µ–Ω—å—à–∏–º –≤–µ—Å–æ–º
        if (description.toLowerCase().includes(searchLower)) {
            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –≤ description`);
            score += 50;
        }
        
        if (materialDescription.toLowerCase().includes(searchLower)) {
            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –≤ materialDescription`);
            score += 50;
        }
        
        if (animeDescription.toLowerCase().includes(searchLower)) {
            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –≤ animeDescription`);
            score += 50;
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π —Å –∂–∞–Ω—Ä–∞–º–∏
        const genres = materialData.genres || [];
        const animeGenres = materialData.anime_genres || [];
        
        const allGenres = [...genres, ...animeGenres];
        
        for (const genre of allGenres) {
            if (genre && genre.toLowerCase().includes(searchLower)) {
                console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –≤ –∂–∞–Ω—Ä–∞—Ö: "${genre}"`);
                score += 80;
                break;
            }
        }
        
        // –ï—Å–ª–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ –Ω–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–æ–≤–∞ –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏
        if (score === 0 && searchLower.includes(' ')) {
            console.log(`üîç –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–ª–æ–≤–∞: "${searchLower}"`);
            const words = searchLower.split(' ').filter(w => w.length > 2);
            
            for (const word of words) {
                console.log(`   –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–æ–≤–æ: "${word}"`);
                
                if (title.toLowerCase().includes(word)) {
                    console.log(`‚úÖ –°–ª–æ–≤–æ "${word}" –Ω–∞–π–¥–µ–Ω–æ –≤ title`);
                    score += 30;
                }
                if (titleOrig.toLowerCase().includes(word)) {
                    console.log(`‚úÖ –°–ª–æ–≤–æ "${word}" –Ω–∞–π–¥–µ–Ω–æ –≤ titleOrig`);
                    score += 20;
                }
                if (otherTitle.toLowerCase().includes(word)) {
                    console.log(`‚úÖ –°–ª–æ–≤–æ "${word}" –Ω–∞–π–¥–µ–Ω–æ –≤ otherTitle`);
                    score += 20;
                }
                if (materialTitle.toLowerCase().includes(word)) {
                    console.log(`‚úÖ –°–ª–æ–≤–æ "${word}" –Ω–∞–π–¥–µ–Ω–æ –≤ materialTitle`);
                    score += 30;
                }
                if (animeTitle.toLowerCase().includes(word)) {
                    console.log(`‚úÖ –°–ª–æ–≤–æ "${word}" –Ω–∞–π–¥–µ–Ω–æ –≤ animeTitle`);
                    score += 20;
                }
                if (description.toLowerCase().includes(word) || 
                    materialDescription.toLowerCase().includes(word) || 
                    animeDescription.toLowerCase().includes(word)) {
                    console.log(`‚úÖ –°–ª–æ–≤–æ "${word}" –Ω–∞–π–¥–µ–Ω–æ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏`);
                    score += 10;
                }
            }
        }
        
        // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –Ω–∞ —É—Ä–æ–≤–Ω–µ —Å–∏–º–≤–æ–ª–æ–≤ (–¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤)
        if (score === 0 && searchLower.length <= 5) {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –õ–µ–≤–µ–Ω—à—Ç–µ–π–Ω–∞ –¥–ª—è –Ω–µ—á–µ—Ç–∫–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            function levenshteinDistance(a, b) {
                const matrix = [];
                
                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—Ç—Ä–∏—Ü—ã
                for (let i = 0; i <= b.length; i++) {
                    matrix[i] = [i];
                }
                
                for (let j = 0; j <= a.length; j++) {
                    matrix[0][j] = j;
                }
                
                // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü—ã
                for (let i = 1; i <= b.length; i++) {
                    for (let j = 1; j <= a.length; j++) {
                        if (b.charAt(i-1) === a.charAt(j-1)) {
                            matrix[i][j] = matrix[i-1][j-1];
                        } else {
                            matrix[i][j] = Math.min(
                                matrix[i-1][j-1] + 1, // –∑–∞–º–µ–Ω–∞
                                matrix[i][j-1] + 1,   // –≤—Å—Ç–∞–≤–∫–∞
                                matrix[i-1][j] + 1    // —É–¥–∞–ª–µ–Ω–∏–µ
                            );
                        }
                    }
                }
                
                return matrix[b.length][a.length];
            }
            
            const allTitles = [
                title, titleOrig, otherTitle, materialTitle, 
                animeTitle, titleEn, ...otherTitles, ...otherTitlesEn, ...otherTitlesJp
            ].filter(t => t && t.length > 0);
            
            for (const t of allTitles) {
                // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ —Å–ª–æ–≤–∞ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ
                const titleWords = t.toLowerCase().split(/\s+|[,.;\-_()[\]{}]/);
                
                for (const word of titleWords) {
                    if (word.length >= 3) {
                        const distance = levenshteinDistance(word, searchLower);
                        // –ï—Å–ª–∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–Ω—å—à–µ –ø–æ–ª–æ–≤–∏–Ω—ã –¥–ª–∏–Ω—ã —Å–ª–æ–≤–∞, —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ –±–ª–∏–∑–∫–∏–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ–º
                        if (distance <= Math.min(2, Math.floor(searchLower.length / 2))) {
                            console.log(`‚úÖ –ë–ª–∏–∑–∫–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: "${word}" ~ "${searchLower}" (—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: ${distance})`);
                            score += Math.max(10, 30 - distance * 10); // –ë–æ–ª—å—à–µ –æ—á–∫–æ–≤ –∑–∞ –º–µ–Ω—å—à–µ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
                        }
                    }
                }
            }
        }
        
        console.log(`üèÜ –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –¥–ª—è "${title || materialTitle}": ${score}`);
        return score;
    }

    // –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –∞–Ω–∏–º–µ –ø–æ –≤—Å–µ–º—É –∫–∞—Ç–∞–ª–æ–≥—É
    async function searchFullCatalog(query) {
        if (!query || query.trim() === '') {
            console.log('üîç –ü—É—Å—Ç–æ–π –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å. –ü–æ–∏—Å–∫ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è.');
            return;
        }
        
        console.log(`üîç –ü–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º—É –∫–∞—Ç–∞–ª–æ–≥—É: "${query}"`);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        showLoading();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
        updateProgressIndicator(0, MAX_ITEMS, `–ü–æ–∏—Å–∫: "${query}"...`);
        
        try {
            // –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –ø–æ–∏—Å–∫–∞
            const searchUrl = getApiUrl(1, null, query);
            console.log(`üì° URL –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞: ${searchUrl}`);
            
            // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
            let data;
            try {
                const response = await fetch(searchUrl);
                if (!response.ok) throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–∏—Å–∫–∞: ${response.status}`);
                data = await response.json();
            } catch (fetchError) {
                console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ fetch –¥–ª—è –ø–æ–∏—Å–∫–∞: ${fetchError.message}`);
                console.log(`üîÑ –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞...`);
                
                try {
                    // –ï—Å–ª–∏ fetch –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º –º–µ—Ç–æ–¥ JSONP
                    data = await fetchAnimeWithJSONP(1, false);
                } catch (jsonpError) {
                    console.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–∏—Å–∫–∞ —á–µ—Ä–µ–∑ JSONP: ${jsonpError.message}`);
                    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∏ —á–µ—Ä–µ–∑ fetch, –Ω–∏ —á–µ—Ä–µ–∑ JSONP');
                }
            }
            
            // –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–≤–æ–¥ –ø–æ–ª–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ API
            console.log("üîç –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç API –¥–ª—è –ø–æ–∏—Å–∫–∞:", data);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞ –∏ –Ω–∞–ª–∏—á–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            if (!data) {
                console.log("‚ö†Ô∏è API –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç");
                animeList.innerHTML = "<p class='no-results'>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.</p>";
                updateProgressIndicator(0, MAX_ITEMS, `–ü–æ–∏—Å–∫: "${query}" - –æ—à–∏–±–∫–∞ API`);
                return;
            }
            
            // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            let allResults = data.results || [];
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –≤–Ω–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–ª—è success
            if (!allResults || allResults.length === 0) {
                console.log("‚ö†Ô∏è –ü–æ–∏—Å–∫ –Ω–µ –≤–µ—Ä–Ω—É–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤");
                animeList.innerHTML = "<p class='no-results'>–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å.</p>";
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
                updateProgressIndicator(0, MAX_ITEMS, `–ü–æ–∏—Å–∫: "${query}" - –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
                return;
            }
            
            // –î–ª—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∞–Ω–∏–º–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            const isPopularAnime = query.toLowerCase() === "–Ω–∞—Ä—É—Ç–æ" || query.toLowerCase() === "naruto" || 
                                query.toLowerCase() === "–±–ª–∏—á" || query.toLowerCase() === "–≤–∞–Ω –ø–∏—Å" || 
                                query.toLowerCase() === "–∞—Ç–∞–∫–∞ —Ç–∏—Ç–∞–Ω–æ–≤";
            
            // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ–µ –∞–Ω–∏–º–µ –∏ –µ—Å—Ç—å —Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞, –∑–∞–≥—Ä—É–∑–∏–º –µ—â–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            if (isPopularAnime && data.next_page) {
                console.log(`üîç –ü–æ–∏—Å–∫ –ø–æ–ø—É–ª—è—Ä–Ω–æ–≥–æ –∞–Ω–∏–º–µ "${query}", –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–æ–ª—å—à–µ —Å—Ç—Ä–∞–Ω–∏—Ü...`);
                
                try {
                    // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Ç–æ—Ä—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
                    const page2Url = data.next_page;
                    console.log(`üì° URL –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ${page2Url}`);
                    
                    const response2 = await fetch(page2Url);
                    if (response2.ok) {
                        const data2 = await response2.json();
                        if (data2.results && data2.results.length > 0) {
                            console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –≤—Ç–æ—Ä–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –¥–æ–±–∞–≤–ª—è–µ–º ${data2.results.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
                            allResults = [...allResults, ...data2.results];
                        }
                    }
                } catch (error) {
                    console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ${error.message}`);
                }
            }
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É
            console.log(`üîç –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ –∑–∞–ø—Ä–æ—Å—É "${query}" –∫ ${allResults.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º...`);
            
            // –§–∏–ª—å—Ç—Ä—É–µ–º –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
            let filteredResults = allResults
                .map(item => ({
                    item,
                    relevance: calculateRelevance(item, query)
                }))
                .filter(scored => scored.relevance > 0)  // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                .sort((a, b) => b.relevance - a.relevance)  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
                .map(scored => scored.item);  // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–∞–º–∏ —ç–ª–µ–º–µ–Ω—Ç—ã
            
            // --- –î–û–ë–ê–í–õ–ï–ù–û: —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ –ø–æ —Ç–æ—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é –Ω–∞–∑–≤–∞–Ω–∏—è ---
            const exactMatches = filteredResults.filter(item => {
                const title = (item.material_data?.title || item.title || '').toLowerCase().trim();
                return title === query.toLowerCase().trim();
            });
            if (exactMatches.length > 0) {
                filteredResults = exactMatches;
            } else {
                filteredResults = [];
            }
            // --- –ö–û–ù–ï–¶ –î–û–ë–ê–í–õ–ï–ù–ò–Ø ---
            
            console.log(`üîç –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –æ—Å—Ç–∞–ª–æ—Å—å ${filteredResults.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤`);
            
            // –ï—Å–ª–∏ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –∏–ª–∏ –º–µ–Ω—å—à–µ 5 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤,
            // –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å
            if (filteredResults.length < 5) {
                console.log("‚ö†Ô∏è –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –æ—Å—Ç–∞–ª–æ—Å—å –º–∞–ª–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. –ü—Ä–æ–±—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å...");
                
                // –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
                const specialSearchUrl = `https://kodikapi.com/search?token=${API_KEY}&title=${encodeURIComponent(query)}&with_material_data=true&full_match=false&limit=10`;
                
                try {
                    console.log(`üì° URL —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: ${specialSearchUrl}`);
                    const specialResponse = await fetch(specialSearchUrl);
                    
                    if (specialResponse.ok) {
                        const specialData = await specialResponse.json();
                        
                        if (specialData.results && specialData.results.length > 0) {
                            console.log(`‚úÖ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –≤–µ—Ä–Ω—É–ª ${specialData.results.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤`);
                            
                            // –û—Ü–µ–Ω–∏–≤–∞–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
                            const specialFilteredResults = specialData.results
                                .map(item => ({
                                    item,
                                    relevance: calculateRelevance(item, query)
                                }))
                                .filter(scored => scored.relevance > 0)
                                .sort((a, b) => b.relevance - a.relevance)
                                .map(scored => scored.item);
                            
                            console.log(`üîç –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –æ—Å—Ç–∞–ª–æ—Å—å ${specialFilteredResults.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤`);
                            
                            if (specialFilteredResults.length > 0) {
                                // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                                const combinedResults = [...specialFilteredResults];
                                
                                // –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
                                if (filteredResults.length > 0) {
                                    const existingIds = new Set(combinedResults.map(item => item.id));
                                    
                                    filteredResults.forEach(item => {
                                        if (!existingIds.has(item.id)) {
                                            combinedResults.push(item);
                                        }
                                    });
                                }
                                
                                filteredResults = combinedResults;
                                console.log(`üîç –ü–æ—Å–ª–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–º–µ–µ–º ${filteredResults.length} –∞–Ω–∏–º–µ`);
                            }
                        }
                    }
                } catch (error) {
                    console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: ${error.message}`);
                }
            }
            
            // –ï—Å–ª–∏ –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            if (filteredResults.length === 0) {
                console.log("‚ö†Ô∏è –ü–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.");
                filteredResults = allResults;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
            const validResults = filteredResults.filter(item => item && (item.material_data || item.title));
            if (validResults.length === 0 && filteredResults.length > 0) {
                console.log("‚ö†Ô∏è API –≤–µ—Ä–Ω—É–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –Ω–æ –æ–Ω–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö:", filteredResults);
                animeList.innerHTML = "<p class='no-results'>–ü–æ–ª—É—á–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç API. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.</p>";
                updateProgressIndicator(0, MAX_ITEMS, `–ü–æ–∏—Å–∫: "${query}" - –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ`);
                return;
            }
            
            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${validResults.length} –≤–∞–ª–∏–¥–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É "${query}"`);
            
            // –í—ã–≤–æ–¥–∏–º –ø–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            if (validResults.length > 0) {
                console.log("üîç –ü—Ä–∏–º–µ—Ä –ø–µ—Ä–≤–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:", JSON.stringify(validResults[0], null, 2));
            }
            
            // –í—ã–≤–æ–¥–∏–º –≤—Å–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            console.log("üìä –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∞–Ω–∏–º–µ:");
            validResults.forEach((item, index) => {
                if (index < 10) { // –í—ã–≤–æ–¥–∏–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10 –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏
                    const title = item.title || (item.material_data?.title) || "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è";
                    console.log(`   ${index+1}. ${title}`);
                }
            });
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            const searchResults = validResults.map(item => {
                // –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                console.log(`üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–∞:`, 
                    item.title || (item.material_data?.title) || "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è", 
                    "material_data:", !!item.material_data
                );
                
                if (!item.material_data) {
                    // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –æ–±—ä–µ–∫—Ç, –µ—Å–ª–∏ material_data –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
                    return {
                        id: item.id || item.link || '1',
                        material_data: {
                            title: item.title || "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è",
                            poster_url: item.poster_url || item.poster || '',
                            genres: item.genres || ['–ë–µ–∑ –∂–∞–Ω—Ä–∞'],
                            shikimori_rating: item.rating,
                            anime_status: item.status || 'released',
                            description: item.description || ''
                        }
                    };
                }
                return item;
            });
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            console.log(`‚úÖ –ü–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${searchResults.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤`);
            const hasValidData = searchResults.every(item => 
                item && item.material_data && item.material_data.title
            );
            
            if (!hasValidData) {
                console.log("‚ö†Ô∏è –ü–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Å—Ç–∞–ª–∏—Å—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!");
                console.log("üîç –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏:", searchResults.slice(0, 3));
                
                // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
                const fixedResults = searchResults.map(item => {
                    if (!item || !item.material_data) {
                        return {
                            id: item?.id || '1',
                            material_data: {
                                title: item?.title || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–Ω–∏–º–µ",
                                poster_url: item?.poster_url || '',
                                genres: ['–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∂–∞–Ω—Ä'],
                                shikimori_rating: 0,
                                anime_status: 'released',
                                description: "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
                            }
                        };
                    }
                    return item;
                });
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
                animeData = fixedResults;
            } else {
                // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
                animeData = searchResults;
            }
            
            // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            console.log(`üîç –ü–µ—Ä–µ–¥–∞–µ–º –Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ ${animeData.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–∞–ø—Ä—è–º—É—é`);
            
            // –ü—Ä—è–º–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            renderAnime(animeData, false);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
            updateProgressIndicator(
                searchResults.length, 
                searchResults.length, 
                `–ù–∞–π–¥–µ–Ω–æ: ${searchResults.length} –∞–Ω–∏–º–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É "${query}"`
            );
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            if (data.next_page) {
                nextPageToken = data.next_page;
                hasMoreData = true;
                currentPage = 1;
            } else {
                hasMoreData = false;
            }
            
            // –ï—Å–ª–∏ –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            if (data.total) {
                updateProgressIndicator(
                    searchResults.length, 
                    data.total, 
                    `–ù–∞–π–¥–µ–Ω–æ: ${searchResults.length} –∏–∑ ${data.total} –∞–Ω–∏–º–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É "${query}"`
                );
            }
            
        } catch (error) {
            console.error("‚õî –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ:", error);
            animeList.innerHTML = "<p class='no-results'>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.</p>";
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
            updateProgressIndicator(0, MAX_ITEMS, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ");
        }
    }
    
    // –§—É–Ω–∫—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É
    function performSearch() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—è –ø–æ–∏—Å–∫–∞
        if (!searchInput) {
            console.log('‚ö†Ô∏è –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫: —ç–ª–µ–º–µ–Ω—Ç –ø–æ–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }
        
        const searchQuery = searchInput.value.trim().toLowerCase();
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ–º –ø–æ–∏—Å–∫–µ
        if (searchQuery) {
            document.body.classList.add('search-active');
        } else {
            document.body.classList.remove('search-active');
        }
        
        // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –ø—É—Å—Ç–æ–π, –∏ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —Ä–∞–Ω–µ–µ, –ø—Ä–æ—Å—Ç–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        if (!searchQuery && animeData.length > 0) {
            filterAnime(false);
            return;
        }
        
        // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–π (–º–µ–Ω—å—à–µ 3 —Å–∏–º–≤–æ–ª–æ–≤) –∏ –µ—Å—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ,
        // —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º
        if (searchQuery.length < 3 && animeData.length > 0) {
            console.log(`üîç –ö–æ—Ä–æ—Ç–∫–∏–π –ø–æ–∏—Å–∫ –ø–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º: "${searchQuery}"`);
            filterAnime(false);
            return;
        }
        
        // –î–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª–∏–Ω–æ–π 3 —Å–∏–º–≤–æ–ª–∞ –∏ –±–æ–ª–µ–µ –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º—É –∫–∞—Ç–∞–ª–æ–≥—É —á–µ—Ä–µ–∑ API
        searchFullCatalog(searchQuery);
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–∏—Å–∫–∞
    const searchStyles = document.createElement('style');
    searchStyles.textContent = `
        .search-active .search-container {
            border-color: var(--accent-orange);
            box-shadow: 0 0 10px rgba(243, 156, 18, 0.5);
        }
        #search {
            transition: all 0.3s ease;
        }
        .search-active #search {
            background-color: rgba(255, 255, 255, 0.1);
        }
        .search-active #search-btn {
            background-color: var(--accent-orange);
        }
        .search-indicator {
            position: absolute;
            top: 10px;
            right: 10px;
            background: var(--accent-orange);
            color: white;
            padding: 5px 10px;
            border-radius: 3px;
            font-size: 12px;
            z-index: 100;
            box-shadow: 0 2px 5px rgba(0,0,0,0.3);
            display: none;
        }
        .search-active .search-indicator {
            display: block;
        }
    `;
    document.head.appendChild(searchStyles);
    
    // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–æ–∏—Å–∫–∞, –µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞
    const searchContainer = document.querySelector('.search-container');
    if (searchContainer) {
        const searchIndicator = document.createElement('div');
        searchIndicator.className = 'search-indicator';
        searchIndicator.textContent = '–†–µ–∂–∏–º –ø–æ–∏—Å–∫–∞';
        searchContainer.appendChild(searchIndicator);
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏ –ø–æ–∏—Å–∫–∞
    if (searchInput) {
        searchInput.addEventListener("keyup", function(e) {
            // –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–∞—É—Ç –ø—Ä–∏ –∫–∞–∂–¥–æ–º –Ω–∞–∂–∞—Ç–∏–∏ –∫–ª–∞–≤–∏—à–∏
            if (searchTimeout) {
                clearTimeout(searchTimeout);
            }
            
            // –ï—Å–ª–∏ –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞ –ø—É—Å—Ç–æ, –∏ –º—ã –¥–æ —ç—Ç–æ–≥–æ –≤—ã–ø–æ–ª–Ω—è–ª–∏ –ø–æ–∏—Å–∫, –∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –∞–Ω–∏–º–µ —Å–Ω–æ–≤–∞
            if (this.value.trim() === "" && window.lastSearchQuery) {
                console.log("üîÑ –ü–æ–ª–µ –ø–æ–∏—Å–∫–∞ –æ—á–∏—â–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ–±—â–µ–º—É —Å–ø–∏—Å–∫—É –∞–Ω–∏–º–µ");
                document.body.classList.remove('search-active');
                window.lastSearchQuery = null;
                resetPaginationAndData();
                fetchAnime(1, false);
                return;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–∞–≤–∏—à—É Enter
            if (e.key === "Enter") {
                e.preventDefault();
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
                const query = this.value.trim();
                if (query.length > 0) {
                    window.lastSearchQuery = query;
                    performSearch();
                }
                return;
            }
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ
            searchTimeout = setTimeout(() => {
                const query = this.value.trim();
                if (query.length >= 3) {
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–ª–∏–Ω–∞ >= 3
                    window.lastSearchQuery = query;
                    performSearch();
                } else if (query.length > 0 && query.length < 3) {
                    // –î–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—Ä–æ—Å—Ç–æ —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
                    filterAnime(false);
                }
            }, 500); // –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ 500 –º—Å –ø–µ—Ä–µ–¥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–æ–∏—Å–∫–æ–º
        });
    } else {
        console.log("‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç –ø–æ–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ");
    }
    
    if (searchBtn) {
        searchBtn.addEventListener("click", function() {
            const query = searchInput?.value.trim() || "";
            if (query.length > 0) {
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
                window.lastSearchQuery = query;
                performSearch();
            } else {
                // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –ø—É—Å—Ç–æ–π –∏ –±—ã–ª–∏ —Ä–∞–Ω–µ–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º
                if (window.lastSearchQuery) {
                    document.body.classList.remove('search-active');
                    window.lastSearchQuery = null;
                    resetPaginationAndData();
                    fetchAnime(1, false);
                }
            }
        });
    } else {
        console.log("‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ –ø–æ–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ");
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∏ –¥–∞–Ω–Ω—ã—Ö
    function resetPaginationAndData() {
        currentPage = 1;
        hasMoreData = true;
        animeData = []; // –û—á–∏—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        filteredData = [];
        endMessageAdded = false;
        nextPageToken = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        
        // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∫–æ–Ω—Ü–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
        const endMessage = document.querySelector('.end-message');
        if (endMessage) {
            endMessage.remove();
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        updateProgressIndicator(0, MAX_ITEMS, "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...");
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –ø–æ–ø—ã—Ç–æ–∫
        window.apiAttemptCount = 0;
        window.noUniqueAttemptsCount = 0;
        
        console.log("üîÑ –°–±—Ä–æ—Å –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∏ –¥–∞–Ω–Ω—ã—Ö");
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–Ω–∏–º–µ (–ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞)
    fetchAnime(1, false);

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
    if (genreFilter) {
        genreFilter.addEventListener("change", function() {
            // –ü—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
            currentPage = 1;
            hasMoreData = true;
            endMessageAdded = false;
            
            // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∫–æ–Ω—Ü–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
            const endMessage = document.querySelector('.end-message');
            if (endMessage) {
                endMessage.remove();
            }
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –∫ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º
            filterAnime(false);
        });
    }
    
    if (ratingFilter) {
        ratingFilter.addEventListener("change", function() {
            // –ü—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Ñ–∏–ª—å—Ç—Ä–æ–≤—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            filterAnime(false);
        });
    }
    
    if (completedCheckbox) {
        completedCheckbox.addEventListener("change", function() {
            // –ü—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Ñ–∏–ª—å—Ç—Ä–æ–≤—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            filterAnime(false);
        });
    }
    
    if (ongoingCheckbox) {
        ongoingCheckbox.addEventListener("change", function() {
            // –ü—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Ñ–∏–ª—å—Ç—Ä–æ–≤—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            filterAnime(false);
        });
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∫—Ä–æ–ª–ª–∞ –¥–ª—è –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
    window.addEventListener('scroll', handleInfiniteScroll);

    // –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—á–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä –∞–Ω–∏–º–µ (–µ—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)
    function createTestAnimeCards() {
        // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        animeList.innerHTML = "";
        
        // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∞–Ω–∏–º–µ
        const testData = [
            {
                title: "Attack on Titan",
                description: "–í –º–∏—Ä–µ, –≥–¥–µ —á–µ–ª–æ–≤–µ—á–µ—Å—Ç–≤–æ —Å–∫—Ä—ã–≤–∞–µ—Ç—Å—è –∑–∞ –æ–≥—Ä–æ–º–Ω—ã–º–∏ —Å—Ç–µ–Ω–∞–º–∏ –æ—Ç –≥–∏–≥–∞–Ω—Ç—Å–∫–∏—Ö —Ç–∏—Ç–∞–Ω–æ–≤, —é–Ω–æ—à–∞ –∫–ª—è–Ω–µ—Ç—Å—è –æ—Ç–æ–º—Å—Ç–∏—Ç—å –∑–∞ —Å–≤–æ—é —Å–µ–º—å—é –∏ –≤–µ—Ä–Ω—É—Ç—å —Å–µ–±–µ —Å–≤–æ–±–æ–¥—É.",
                genres: ["–°—ë–Ω–µ–Ω", "–î—Ä–∞–º–∞", "–≠–∫—à–µ–Ω", "–§—ç–Ω—Ç–µ–∑–∏"],
                rating: 9.1,
                status: "released",
                poster: "https://via.placeholder.com/300x400/1a1a1a/f39c12?text=Attack+on+Titan"
            },
            {
                title: "Demon Slayer",
                description: "–ò—Å—Ç–æ—Ä–∏—è –º–æ–ª–æ–¥–æ–≥–æ –ø–∞—Ä–Ω—è, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—Ç –æ—Ç–æ–º—Å—Ç–∏—Ç—å –∑–∞ —Å–≤–æ—é —Å–µ–º—å—é –∏ –∏–∑–ª–µ—á–∏—Ç—å —Å–µ—Å—Ç—Ä—É –æ—Ç –¥–µ–º–æ–Ω–∏—á–µ—Å–∫–æ–π –±–æ–ª–µ–∑–Ω–∏.",
                genres: ["–°—ë–Ω–µ–Ω", "–≠–∫—à–µ–Ω", "–°–≤–µ—Ä—Ö—ä–µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ", "–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π"],
                rating: 9.7,
                status: "released",
                poster: "https://via.placeholder.com/300x400/1a1a1a/f39c12?text=Demon+Slayer"
            },
            {
                title: "My Hero Academia",
                description: "–í –º–∏—Ä–µ, –≥–¥–µ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –ª—é–¥–µ–π –æ–±–ª–∞–¥–∞—é—Ç —Å—É–ø–µ—Ä—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—è–º–∏, –º–∞–ª—å—á–∏–∫ –±–µ–∑ –Ω–∏—Ö –º–µ—á—Ç–∞–µ—Ç —Å—Ç–∞—Ç—å –≤–µ–ª–∏—á–∞–π—à–∏–º –≥–µ—Ä–æ–µ–º.",
                genres: ["–°—ë–Ω–µ–Ω", "–ö–æ–º–µ–¥–∏—è", "–≠–∫—à–µ–Ω", "–°—É–ø–µ—Ä–≥–µ—Ä–æ–∏"],
                rating: 8.9,
                status: "ongoing",
                poster: "https://via.placeholder.com/300x400/1a1a1a/f39c12?text=My+Hero+Academia"
            },
            {
                title: "Fullmetal Alchemist: Brotherhood",
                description: "–î–≤–∞ –±—Ä–∞—Ç–∞ –∏—â—É—Ç —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–π –∫–∞–º–µ–Ω—å, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å —Å–≤–æ–∏ —Ç–µ–ª–∞ –ø–æ—Å–ª–µ –Ω–µ—É–¥–∞—á–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏ –≤–æ—Å–∫—Ä–µ—Å–∏—Ç—å –º–∞—Ç—å.",
                genres: ["–°—ë–Ω–µ–Ω", "–§—ç–Ω—Ç–µ–∑–∏", "–≠–∫—à–µ–Ω", "–î—Ä–∞–º–∞"],
                rating: 9.8,
                status: "released",
                poster: "https://via.placeholder.com/300x400/1a1a1a/f39c12?text=Fullmetal+Alchemist"
            },
            {
                title: "One Punch Man",
                description: "–ò—Å—Ç–æ—Ä–∏—è –æ —Å—É–ø–µ—Ä–≥–µ—Ä–æ–µ, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –ø–æ–±–µ–¥–∏—Ç—å –ª—é–±–æ–≥–æ –≤—Ä–∞–≥–∞ –æ–¥–Ω–∏–º —É–¥–∞—Ä–æ–º –∏ –∏—â–µ—Ç –¥–æ—Å—Ç–æ–π–Ω–æ–≥–æ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞.",
                genres: ["–ö–æ–º–µ–¥–∏—è", "–≠–∫—à–µ–Ω", "–°—É–ø–µ—Ä–≥–µ—Ä–æ–∏", "–ü–∞—Ä–æ–¥–∏—è"],
                rating: 8.7,
                status: "ongoing",
                poster: "https://via.placeholder.com/300x400/1a1a1a/f39c12?text=One+Punch+Man"
            },
            {
                title: "Death Note",
                description: "–°—Ç—É–¥–µ–Ω—Ç –Ω–∞—Ö–æ–¥–∏—Ç —Å–≤–µ—Ä—Ö—ä–µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—É—é —Ç–µ—Ç—Ä–∞–¥—å, –∫–æ—Ç–æ—Ä–∞—è —É–±–∏–≤–∞–µ—Ç –ª—é–¥–µ–π, —á—å–∏ –∏–º–µ–Ω–∞ –≤ –Ω–µ–π –∑–∞–ø–∏—Å–∞–Ω—ã.",
                genres: ["–°—ç–π–Ω—ç–Ω", "–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π", "–¢—Ä–∏–ª–ª–µ—Ä", "–î–µ—Ç–µ–∫—Ç–∏–≤"],
                rating: 9.4,
                status: "released",
                poster: "https://via.placeholder.com/300x400/1a1a1a/f39c12?text=Death+Note"
            },
            {
                title: "Naruto",
                description: "–ú–æ–ª–æ–¥–æ–π –Ω–∏–Ω–¥–∑—è —Å –¥–µ–º–æ–Ω–æ–º –≤–Ω—É—Ç—Ä–∏ —Å—Ç—Ä–µ–º–∏—Ç—Å—è —Å—Ç–∞—Ç—å –ª–∏–¥–µ—Ä–æ–º —Å–≤–æ–µ–π –¥–µ—Ä–µ–≤–Ω–∏ –∏ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–∑–Ω–∞–Ω–∏–µ.",
                genres: ["–°—ë–Ω–µ–Ω", "–≠–∫—à–µ–Ω", "–ö–æ–º–µ–¥–∏—è", "–ë–æ–µ–≤—ã–µ –∏—Å–∫—É—Å—Å—Ç–≤–∞"],
                rating: 8.5,
                status: "released",
                poster: "https://via.placeholder.com/300x400/1a1a1a/f39c12?text=Naruto"
            },
            {
                title: "Jujutsu Kaisen",
                description: "–ü–æ–¥—Ä–æ—Å—Ç–æ–∫ –≤—Å—Ç—É–ø–∞–µ—Ç –≤ —Ç–∞–π–Ω—É—é –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é –∑–∞–∫–ª–∏–Ω–∞—Ç–µ–ª–µ–π, —á—Ç–æ–±—ã –±–æ—Ä–æ—Ç—å—Å—è —Å–æ –∑–ª—ã–º–∏ –¥—É—Ö–∞–º–∏ –∏ –ø—Ä–æ–∫–ª—è—Ç–∏—è–º–∏.",
                genres: ["–°—ë–Ω–µ–Ω", "–°–≤–µ—Ä—Ö—ä–µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ", "–≠–∫—à–µ–Ω", "–®–∫–æ–ª–∞"],
                rating: 9.2,
                status: "ongoing",
                poster: "https://via.placeholder.com/300x400/1a1a1a/f39c12?text=Jujutsu+Kaisen"
            },
            {
                title: "Hunter x Hunter",
                description: "–ú–∞–ª—å—á–∏–∫ –∏—â–µ—Ç —Å–≤–æ–µ–≥–æ –æ—Ç—Ü–∞-–æ—Ö–æ—Ç–Ω–∏–∫–∞ –∏ –ø—Ä–æ—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ –æ–ø–∞—Å–Ω—ã–µ –∏—Å–ø—ã—Ç–∞–Ω–∏—è, —á—Ç–æ–±—ã —Å—Ç–∞—Ç—å –æ—Ö–æ—Ç–Ω–∏–∫–æ–º.",
                genres: ["–°—ë–Ω–µ–Ω", "–ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è", "–≠–∫—à–µ–Ω", "–§—ç–Ω—Ç–µ–∑–∏"],
                rating: 9.5,
                status: "ongoing",
                poster: "https://via.placeholder.com/300x400/1a1a1a/f39c12?text=Hunter+x+Hunter"
            },
            {
                title: "Steins;Gate",
                description: "–°—Ç—É–¥–µ–Ω—Ç—ã –∏–∑–æ–±—Ä–µ—Ç–∞—é—Ç —Å–ø–æ—Å–æ–± –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø—Ä–æ—à–ª–æ–µ –∏ –ø–æ–ø–∞–¥–∞—é—Ç –≤ –æ–ø–∞—Å–Ω—É—é —Å–∏—Ç—É–∞—Ü–∏—é.",
                genres: ["–ù–∞—É—á–Ω–∞—è —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞", "–¢—Ä–∏–ª–ª–µ—Ä", "–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π", "–î—Ä–∞–º–∞"],
                rating: 9.6,
                status: "released",
                poster: "https://via.placeholder.com/300x400/1a1a1a/f39c12?text=Steins;Gate"
            },
            {
                title: "Re:Zero",
                description: "–ü–∞—Ä–µ–Ω—å –ø–æ–ø–∞–¥–∞–µ—Ç –≤ —Ñ—ç–Ω—Ç–µ–∑–∏–π–Ω—ã–π –º–∏—Ä, –≥–¥–µ –ø–æ–ª—É—á–∞–µ—Ç —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –≤–æ–∑—Ä–æ–∂–¥–∞—Ç—å—Å—è –ø–æ—Å–ª–µ —Å–º–µ—Ä—Ç–∏.",
                genres: ["–ò—Å—ç–∫–∞–π", "–î—Ä–∞–º–∞", "–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π", "–§—ç–Ω—Ç–µ–∑–∏"],
                rating: 8.8,
                status: "ongoing",
                poster: "https://via.placeholder.com/300x400/1a1a1a/f39c12?text=Re:Zero"
            },
            {
                title: "Spy x Family",
                description: "–®–ø–∏–æ–Ω, —Ç–µ–ª–µ–ø–∞—Ç –∏ —É–±–∏–π—Ü–∞ —Å–æ–∑–¥–∞—é—Ç —Ñ–∞–ª—å—à–∏–≤—É—é —Å–µ–º—å—é –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∏—Å—Å–∏–∏, –Ω–µ –ø–æ–¥–æ–∑—Ä–µ–≤–∞—è –æ —Ç–∞–π–Ω–∞—Ö –¥—Ä—É–≥ –¥—Ä—É–≥–∞.",
                genres: ["–ö–æ–º–µ–¥–∏—è", "–≠–∫—à–µ–Ω", "–®–ø–∏–æ–Ω—Å–∫–∏–π", "–°–µ–º–µ–π–Ω—ã–π"],
                rating: 9.0,
                status: "ongoing",
                poster: "https://via.placeholder.com/300x400/1a1a1a/f39c12?text=Spy+x+Family"
            }
        ];
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ñ–æ—Ä–º–∞—Ç –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –º–∞—Å—Å–∏–≤ –∞–Ω–∏–ºe
        animeData = testData.map((item, index) => ({
            id: `test-${index + 1}`,
            material_data: {
                title: item.title,
                poster_url: item.poster,
                genres: item.genres,
                shikimori_rating: item.rating,
                anime_status: item.status,
                description: item.description
            }
        }));
        
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        filterAnime(false);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        updateProgressIndicator(animeData.length, animeData.length, "–ü–æ–∫–∞–∑–∞–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ, –ø–æ—Å–∫–æ–ª—å–∫—É API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
        
        console.log("üìä –°–æ–∑–¥–∞–Ω–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤:", animeData.length);
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–±—â–∏—Ö —Å—Ç–∏–ª–µ–π –∫–∞—Ä—Ç–æ—á–µ–∫ –æ–¥–∏–Ω —Ä–∞–∑
    function addAnimeCardStyles() {
        const cardStyles = document.createElement('style');
        cardStyles.textContent = `
            .anime-card {
                width: 280px;
                border-radius: 10px;
                overflow: hidden;
                background: #1a1a1a;
                box-shadow: 0 8px 15px rgba(0, 0, 0, 0.3);
                transition: all 0.3s ease;
                position: relative;
                margin-bottom: 30px;
                display: flex;
                flex-direction: column;
                cursor: pointer;
            }
            .anime-poster {
                position: relative;
                height: 380px;
                overflow: hidden;
            }
            .rating-top-right {
                position: absolute;
                top: 2px;
                right: 10px;
                z-index: 20;
                background: var(--accent-orange);
                color: white;
                padding: 5px 14px;
                border-radius: 8px;
                font-weight: bold;
                font-size: 16px;
                box-shadow: 0 2px 8px rgba(0,0,0,0.15);
            }
            .anime-card:hover {
                transform: translateY(-5px);
                box-shadow: 0 15px 25px rgba(0, 0, 0, 0.5);
            }
            .anime-poster img {
                width: 100%;
                height: 100%;
                object-fit: cover;
                transition: transform 0.5s ease;
            }
            .anime-card:hover .anime-poster img {
                transform: scale(1.05);
            }
            .status {
                position: absolute;
                top: 10px;
                left: 10px;
                padding: 3px 8px;
                border-radius: 5px;
                font-size: 12px;
                font-weight: bold;
                z-index: 10;
            }
            .status.ongoing {
                background: #4CAF50;
                color: white;
            }
            .status.released {
                background: #2196F3;
                color: white;
            }
            .anime-info {
                padding: 15px;
                flex-grow: 1;
                display: flex;
                flex-direction: column;
            }
            .anime-title {
                color: white;
                font-size: 16px;
                margin: 0 0 10px 0;
                line-height: 1.3;
                max-height: 42px;
                overflow: hidden;
                display: -webkit-box;
                -webkit-line-clamp: 2;
                -webkit-box-orient: vertical;
            }
            .anime-description {
                color: #aaa;
                font-size: 14px;
                margin: 0 0 15px 0;
                line-height: 1.4;
                max-height: 40px;
                overflow: hidden;
            }
            .genres-container {
                display: flex;
                flex-wrap: wrap;
                gap: 5px;
                margin-bottom: 15px;
            }
            .genre-tag {
                background: rgba(255, 255, 255, 0.1);
                color: #aaa;
                padding: 3px 8px;
                border-radius: 3px;
                font-size: 12px;
            }
            .watch-btn {
                display: block;
                width: 90%;
                margin: 20px auto 10px auto;
                background: linear-gradient(90deg, #ff9900 0%, #ff7b00 100%);
                color: #fff;
                font-size: 1.3rem;
                font-weight: bold;
                border: none;
                border-radius: 25px;
                padding: 16px 0;
                cursor: pointer;
                box-shadow: 0 4px 16px rgba(255, 140, 0, 0.2);
                text-transform: uppercase;
                letter-spacing: 0.5px;
                transition: background 0.2s, transform 0.1s;
            }
            .watch-btn:hover {
                background: linear-gradient(90deg, #ff7b00 0%, #ff9900 100%);
                transform: translateY(-2px) scale(1.03);
            }
        `;
        document.head.appendChild(cardStyles);
    }
});
