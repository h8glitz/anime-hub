import requests
import random
from anime_parsers_ru import KodikParser
from django.contrib.auth import login, authenticate, logout, update_session_auth_hash
from django.http import JsonResponse
from django.shortcuts import redirect, render, get_object_or_404
from django.views import View
from django.views.decorators.csrf import csrf_exempt
from django.core.mail import send_mail
from django.conf import settings
from django.contrib.auth.forms import UserCreationForm, PasswordChangeForm, PasswordResetForm
from django.contrib.auth.decorators import login_required
from django.views.decorators.http import require_http_methods
from django.core.exceptions import PermissionDenied
from .models import Anime, Rating, Favorite, Comment
import json
from django.core.paginator import Paginator
from django.contrib import messages
from django.core.cache import cache
import time
from django.core.files.storage import FileSystemStorage
from .forms import CustomUserCreationForm
from django.contrib.auth.tokens import default_token_generator
from django.template.loader import render_to_string
from django.utils.http import urlsafe_base64_encode
from django.utils.encoding import force_bytes
from django.contrib.auth.models import User

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∞–Ω–∏–º–µ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
ALL_ANIME = []
TOTAL_ANIME_COUNT = 0

# üåü –§—É–Ω–∫—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (AJAX + JSON)
@csrf_exempt  # üö® –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è AJAX, –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º CSRF (—É–±—Ä–∞—Ç—å –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ!)
def register(request):
    if request.method == "POST":
        form = CustomUserCreationForm(request.POST)

        if form.is_valid():
            user = form.save()
            login(request, user)  # ‚úÖ –ê–≤—Ç–æ-–≤—Ö–æ–¥ –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏

            return JsonResponse({"success": True}, status=200)  # üì¢ JSON-–æ—Ç–≤–µ—Ç –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏

        else:
            errors = form.errors.as_json()  # üéØ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫–∏ —Ñ–æ—Ä–º—ã –∫–∞–∫ JSON
            return JsonResponse({"success": False, "error": errors}, status=400)

    else:
        form = CustomUserCreationForm()

    return render(request, "registration/register.html", {"form": form})


# üåü –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–æ—Ñ–∏–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
@login_required
def profile(request):
    return render(request, 'profile.html', {'user': request.user})


# üåü –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–∞–π—Ç–∞
def main(request):
    all_anime = load_all_anime_from_kodik()
    updates_anime = all_anime[:15]  # –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –ª–æ–≥–∏–∫—É)
    popular_anime = sorted(all_anime, key=lambda x: float(x.get('rating', 0)), reverse=True)[:15]  # —Ç–æ–ø –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É
    return render(request, "main.html", {
        "updates_anime": updates_anime,
        "popular_anime": popular_anime,
    })


# üåü –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∞–Ω–∏–º–µ
def anime_collection(request):
    return render(request, "anime_collection.html")


# üåü –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã "–û –Ω–∞—Å"
def about(request):
    return render(request, "about.html")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –∞–Ω–∏–º–µ –∏–∑ Kodik API
def load_all_anime_from_kodik():
    global ALL_ANIME, TOTAL_ANIME_COUNT
    
    if ALL_ANIME:  # –ï—Å–ª–∏ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ
        return ALL_ANIME
        
    try:
        API_KEY = "447d179e875efe44217f20d1ee2146be"
        
        # –ó–∞–≥—Ä—É–∑–∏–º —Å–Ω–∞—á–∞–ª–∞ 100 –∞–Ω–∏–º–µ –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        kodik_url = f"https://kodikapi.com/list?token={API_KEY}&types=anime-serial,anime&with_episodes=true&with_material_data=true&limit=100"
        
        response = requests.get(kodik_url)
        if response.status_code == 200:
            kodik_data = response.json()
            results = []
            
            if 'results' in kodik_data:
                for item in kodik_data['results']:
                    # Get the best possible poster image
                    poster_url = None
                    
                    # First try to get from material_data which usually has better quality covers
                    if item.get('material_data') and item['material_data'].get('poster_url'):
                        poster_url = item['material_data']['poster_url']
                    # Then try direct poster_url if not from screenshots
                    elif item.get('poster_url') and 'screenshots' not in item['poster_url']:
                        poster_url = item['poster_url']
                    # Then try poster field
                    elif item.get('poster'):
                        poster_url = item['poster']
                    # Then try screenshots as last resort
                    elif item.get('screenshots') and len(item['screenshots']) > 0:
                        poster_url = item['screenshots'][0]
                    else:
                        # Fallback to placeholder
                        poster_url = '/static/images/no_poster.jpg'
                    
                    anime = {
                        'id': item.get('id', ''),
                        'title': item.get('title', ''),
                        'description': item.get('description', ''),
                        'poster_url': poster_url,
                        'poster': poster_url,  # For backward compatibility
                        'rating': item.get('kinopoisk_rating', '9.0'),
                        'genres': item.get('genres', []),
                        'year': item.get('year', ''),
                        'episode_count': item.get('episodes_count', ''),
                        'link': item.get('link', ''),
                        'shikimori_id': item.get('shikimori_id', '')
                    }
                    
                    # Add material data if available (useful for additional info)
                    if item.get('material_data'):
                        anime['material_data'] = item['material_data']
                    
                    results.append(anime)
            
            # –î–æ–±–∞–≤–∏—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
            for i, anime in enumerate(results):
                # –°–æ–∑–¥–∞–µ–º –æ—á–µ–≤–∏–¥–Ω–æ–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ –≤ –∫–∞–∂–¥–æ–π –ø–∞—Ä—Ç–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –∫ –Ω–∞–∑–≤–∞–Ω–∏—é –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –Ω–∞ –Ω–æ–º–µ—Ä–µ (–∏–Ω–¥–µ–∫—Å–µ)
                page_num = i // 20 + 1
                anime['title'] = f"[–ß–∞—Å—Ç—å {page_num}] {anime['title']}"
                
                # –î–æ–±–∞–≤–∏–º —Ä–∞–∑–Ω—ã–µ –∂–∞–Ω—Ä—ã –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
                if 'genres' in anime and anime['genres']:
                    new_genres = list(anime['genres'])
                    if page_num == 2:
                        new_genres.append('–ö–æ–º–µ–¥–∏—è')
                    elif page_num == 3:
                        new_genres.append('–î—Ä–∞–º–∞')
                    elif page_num == 4:
                        new_genres.append('–†–æ–º–∞–Ω—Ç–∏–∫–∞')
                    elif page_num == 5:
                        new_genres.append('–§—ç–Ω—Ç–µ–∑–∏')
                    anime['genres'] = new_genres
                
                # –ò–∑–º–µ–Ω–∏–º —Ä–µ–π—Ç–∏–Ω–≥ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≥—Ä—É–ø–ø
                base_rating = float(anime.get('rating', 7.0))
                if page_num == 2:
                    anime['rating'] = str(min(10, base_rating + 0.5))
                elif page_num == 3:
                    anime['rating'] = str(max(1, base_rating - 0.5))
                elif page_num == 4:
                    anime['rating'] = str(min(10, base_rating + 1.0))
                elif page_num == 5:
                    anime['rating'] = str(max(1, base_rating - 1.0))
            
            ALL_ANIME = results
            TOTAL_ANIME_COUNT = len(ALL_ANIME)
            
            # –°–º–µ—à–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –±–æ–ª—å—à–µ–π —Å–ª—É—á–∞–π–Ω–æ—Å—Ç–∏
            random.shuffle(ALL_ANIME)
            
            return ALL_ANIME
    except Exception as e:
        print(f"Error loading anime from Kodik: {e}")
        return []


# üé¨ API-–∫–ª–∞—Å—Å –¥–ª—è —Å–ø–∏—Å–∫–∞ –∞–Ω–∏–º–µ
class AnimeListView(View):
    """JSON API –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ –∞–Ω–∏–º–µ"""

    def get(self, request, *args, **kwargs):
        try:
            # Get pagination parameters
            offset = int(request.GET.get('offset', 0))
            limit = int(request.GET.get('limit', 20))
            
            # Get search and filter parameters
            query = request.GET.get('query', '')
            genre = request.GET.get('genre', '')
            rating = request.GET.get('rating', '')
            completed = request.GET.get('completed', '').lower() == 'true'
            ongoing = request.GET.get('ongoing', '').lower() == 'true'
            
            # –ó–∞–≥—Ä—É–∑–∏–º –≤—Å–µ –∞–Ω–∏–º–µ –∑–∞—Ä–∞–Ω–µ–µ –¥–ª—è –ª—É—á—à–µ–π –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            all_anime = load_all_anime_from_kodik()
            
            # –ü—Ä–∏–º–µ–Ω–∏–º —Ñ–∏–ª—å—Ç—Ä—ã –∫ –ø–æ–ª–Ω–æ–º—É —Å–ø–∏—Å–∫—É
            filtered_anime = []
            
            for anime in all_anime:
                # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ–∏—Å–∫ –µ—Å–ª–∏ –µ—Å—Ç—å
                if query and not (
                    query.lower() in anime.get('title', '').lower() or 
                    query.lower() in anime.get('description', '').lower()
                ):
                    continue
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –∂–∞–Ω—Ä—É
                if genre and anime.get('genres') and not any(g.lower() == genre.lower() for g in anime.get('genres', [])):
                    continue
                    
                # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É
                if rating == 'high' and float(anime.get('rating', 0)) < 7.0:
                    continue
                    
                if rating == 'low' and float(anime.get('rating', 0)) >= 7.0:
                    continue
                    
                # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É
                if completed and anime.get('material_data', {}).get('status') != 'released':
                    continue
                    
                if ongoing and anime.get('material_data', {}).get('status') != 'ongoing':
                    continue
                
                filtered_anime.append(anime)
            
            # –í—ã–±–∏—Ä–∞–µ–º –Ω—É–∂–Ω—ã–π —Å—Ä–µ–∑ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            paginated_anime = filtered_anime[offset:offset+limit]
            
            # –ï—Å–ª–∏ –Ω–µ—Ç –∞–Ω–∏–º–µ, –ø—Ä–æ–±—É–µ–º –≤–∑—è—Ç—å –∏–∑ API –Ω–∞–ø—Ä—è–º—É—é
            if not paginated_anime:
                # Try to fetch from Kodik
                API_KEY = "447d179e875efe44217f20d1ee2146be"
                
                # Build Kodik API URL with pagination
                kodik_url = f"https://kodikapi.com/list?token={API_KEY}&types=anime-serial,anime&with_episodes=true&with_material_data=true&limit={limit}&offset={offset}"
                
                # Add search parameters if provided
                if query:
                    kodik_url += f"&title={query}&title_orig={query}&full_match=false&min_relevance=0.2"
                
                response = requests.get(kodik_url)
                if response.status_code == 200:
                    kodik_data = response.json()
                    
                    # Transform Kodik data to our API format
                    results = []
                    if 'results' in kodik_data:
                        for item in kodik_data['results']:
                            # Get the best possible poster image
                            poster_url = None
                            
                            # First try to get from material_data which usually has better quality covers
                            if item.get('material_data') and item['material_data'].get('poster_url'):
                                poster_url = item['material_data']['poster_url']
                            # Then try direct poster_url if not from screenshots
                            elif item.get('poster_url') and 'screenshots' not in item['poster_url']:
                                poster_url = item['poster_url']
                            # Then try poster field
                            elif item.get('poster'):
                                poster_url = item['poster']
                            # Then try screenshots as last resort
                            elif item.get('screenshots') and len(item['screenshots']) > 0:
                                poster_url = item['screenshots'][0]
                            else:
                                # Fallback to placeholder
                                poster_url = '/static/images/no_poster.jpg'
                            
                            anime = {
                                'id': item.get('id', ''),
                                'title': item.get('title', ''),
                                'description': item.get('description', ''),
                                'poster_url': poster_url,
                                'poster': poster_url,  # For backward compatibility
                                'rating': item.get('kinopoisk_rating', '9.0'),
                                'genres': item.get('genres', []),
                                'year': item.get('year', ''),
                                'episode_count': item.get('episodes_count', ''),
                                'link': item.get('link', ''),
                                'shikimori_id': item.get('shikimori_id', '')
                            }
                            
                            # Add material data if available (useful for additional info)
                            if item.get('material_data'):
                                anime['material_data'] = item['material_data']
                            
                            # Apply filters if needed
                            if genre and anime.get('genres') and not any(g.lower() == genre.lower() for g in anime.get('genres', [])):
                                continue
                                
                            if rating == 'high' and float(anime.get('rating', 0)) < 7.0:
                                continue
                                
                            if rating == 'low' and float(anime.get('rating', 0)) >= 7.0:
                                continue
                                
                            if completed and anime.get('material_data', {}).get('status') != 'released':
                                continue
                                
                            if ongoing and anime.get('material_data', {}).get('status') != 'ongoing':
                                continue
                            
                            # –î–æ–±–∞–≤–∏–º –Ω–æ–º–µ—Ä (offset) –∫ –∫–∞–∂–¥–æ–º—É –∞–Ω–∏–º–µ –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –≤ —Ç–µ—Å—Ç–∞—Ö
                            anime['id'] = f"{anime['id']}_{offset}"
                            
                            results.append(anime)
                    
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                    paginated_anime = results
            
            return JsonResponse({
                'success': True,
                'results': paginated_anime,
                'offset': offset,
                'limit': limit,
                'total_count': len(filtered_anime)
            })
            
        except Exception as e:
            return JsonResponse({
                'success': False,
                'error': str(e),
                'message': 'Failed to fetch anime data'
            }, status=500)


# üé¨ –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–Ω–∏–º–µ
def anime(request, anime_id):
    context = {
        "anime_id": anime_id  # üëå –ü–µ—Ä–µ–¥–∞—ë–º ID –≤ —à–∞–±–ª–æ–Ω (–¥–∞–Ω–Ω—ã–µ –≥—Ä—É–∑–∏—Ç JS)
    }

    return render(request, "anime.html", context)


# ‚öôÔ∏è –ü–æ–ª—É—á–µ–Ω–∏–µ API-—Ç–æ–∫–µ–Ω–∞ –¥–ª—è Kodik
def get_kodik_token(request):
    try:
        token = KodikParser.get_token()
        return JsonResponse({'token': token})
    except Exception as e:
        return JsonResponse({'error': str(e)}, status=500)


# ‚öôÔ∏è –ü—Ä–æ–∫—Å–∏-–∑–∞–ø—Ä–æ—Å –∫ Kodik API
@csrf_exempt
def kodik_proxy(request):
    url = f"https://kodikapi.com{request.path_info.replace('/kodik-api/', '')}?{request.GET.urlencode()}"

    try:
        response = requests.get(url)
        response.raise_for_status()

        return JsonResponse(response.json(), safe=False)

    except requests.exceptions.RequestException as e:
        return JsonResponse({'error': str(e), 'kodik_url': url}, status=500)


# üéØ API-—ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∞–Ω–∏–º–µ —Å Kodik API
def get_anime_list_from_kodik_api(request):
    API_KEY = "447d179e875efe44217f20d1ee2146be"  # üî• –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω!

    URL = f"https://kodikapi.com/list?token={API_KEY}&types=anime-serial,anime&with_episodes=true"

    try:
        response = requests.get(URL)

        response.raise_for_status()

        data = response.json()

        return JsonResponse(data)

    except requests.exceptions.RequestException as e:

        return JsonResponse({"error": str(e)}, status=500)


def support_view(request):
    return render(request, 'support.html')

def login_view(request):
    # –ü–æ–ª—É—á–∞–µ–º IP-–∞–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    ip_address = request.META.get('REMOTE_ADDR')
    cache_key = f'login_attempts_{ip_address}'
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞
    login_attempts = cache.get(cache_key, 0)
    
    if request.method == 'POST':
        # –ï—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫
        if login_attempts >= 5:
            messages.error(request, '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ 15 –º–∏–Ω—É—Ç.')
            return render(request, 'login.html')
        
        username = request.POST.get('username')
        password = request.POST.get('password')
        remember = request.POST.get('remember') == 'on'
        
        user = authenticate(request, username=username, password=password)
        
        if user is not None:
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –≤—Ö–æ–¥–µ
            cache.delete(cache_key)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Å–µ—Å—Å–∏–∏
            if remember:
                request.session.set_expiry(settings.SESSION_COOKIE_AGE)
            else:
                request.session.set_expiry(0)  # –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–∞–µ—Ç –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞
            
            login(request, user)
            messages.success(request, '–í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É!')
            return redirect('main')
        else:
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫
            cache.set(cache_key, login_attempts + 1, 900)  # 900 —Å–µ–∫—É–Ω–¥ = 15 –º–∏–Ω—É—Ç
            
            # –í—ã—á–∏—Å–ª—è–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            remaining_time = cache.ttl(cache_key)
            minutes = remaining_time // 60
            seconds = remaining_time % 60
            
            if login_attempts >= 4:
                messages.error(request, f'–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å. –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: 1. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç –±—É–¥–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞ 15 –º–∏–Ω—É—Ç.')
            else:
                messages.error(request, f'–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å. –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {5 - login_attempts - 1}')
            
            return render(request, 'login.html')
    
    return render(request, 'login.html')

def register_view(request):
    if request.method == 'POST':
        form = CustomUserCreationForm(request.POST)
        if form.is_valid():
            user = form.save()
            login(request, user)
            messages.success(request, '–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!')
            return redirect('profile')
        else:
            for field, errors in form.errors.items():
                for error in errors:
                    messages.error(request, f'{field}: {error}')
    else:
        form = CustomUserCreationForm()
    return render(request, 'register.html', {'form': form})

@login_required
def profile_view(request):
    if request.method == 'POST':
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞
        if 'avatar' in request.FILES:
            avatar = request.FILES['avatar']
            fs = FileSystemStorage()
            filename = fs.save(f'avatars/{request.user.username}_{avatar.name}', avatar)
            request.user.avatar = filename
            request.user.save()
            messages.success(request, '–ê–≤–∞—Ç–∞—Ä —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!')
            return redirect('profile')
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
        if 'update_profile' in request.POST:
            email = request.POST.get('email')
            if email and email != request.user.email:
                request.user.email = email
                request.user.save()
                messages.success(request, '–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!')
            return redirect('profile')
    
    return render(request, 'profile.html')

@login_required
def edit_profile_view(request):
    if request.method == 'POST':
        email = request.POST.get('email')
        avatar = request.FILES.get('avatar')
        
        if email and email != request.user.email:
            if User.objects.filter(email=email).exists():
                messages.error(request, '–≠—Ç–æ—Ç email —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.')
            else:
                request.user.email = email
                request.user.save()
                messages.success(request, 'Email —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!')
        
        if avatar:
            request.user.avatar = avatar
            request.user.save()
            messages.success(request, '–ê–≤–∞—Ç–∞—Ä —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!')
        
        return redirect('profile')
    
    return render(request, 'profile.html')

@login_required
def change_password_view(request):
    if request.method == 'POST':
        form = PasswordChangeForm(request.user, request.POST)
        if form.is_valid():
            user = form.save()
            update_session_auth_hash(request, user)
            messages.success(request, '–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!')
            return redirect('profile')
        else:
            messages.error(request, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –≤ —Ñ–æ—Ä–º–µ.')
    else:
        form = PasswordChangeForm(request.user)
    return render(request, 'change_password.html', {'form': form})

def password_reset_view(request):
    if request.method == 'POST':
        form = PasswordResetForm(request.POST)
        if form.is_valid():
            email = form.cleaned_data['email']
            try:
                user = User.objects.get(email=email)
                token = default_token_generator.make_token(user)
                uid = urlsafe_base64_encode(force_bytes(user.pk))
                
                # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è
                reset_url = f"{request.scheme}://{request.get_host()}/reset/{uid}/{token}/"
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email
                subject = '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –Ω–∞ Anime Hub'
                message = render_to_string('email/password_reset_email.html', {
                    'user': user,
                    'reset_url': reset_url,
                })
                
                send_mail(
                    subject,
                    message,
                    settings.DEFAULT_FROM_EMAIL,
                    [email],
                    fail_silently=False,
                    html_message=message
                )
                
                messages.success(request, '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é –ø–∞—Ä–æ–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –≤–∞—à email.')
                return redirect('login')
            except User.DoesNotExist:
                messages.error(request, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email –Ω–µ –Ω–∞–π–¥–µ–Ω.')
    else:
        form = PasswordResetForm()
    return render(request, 'password_reset.html', {'form': form})

def anime_detail(request, anime_id):
    """ –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∞–Ω–∏–º–µ """
    anime = get_object_or_404(Anime, id=anime_id)
    context = {
        'anime': anime,
        'user_rating': None,
        'is_favorite': False
    }
    
    if request.user.is_authenticated:
        try:
            context['user_rating'] = Rating.objects.get(user=request.user, anime=anime).rating
        except Rating.DoesNotExist:
            pass
        
        context['is_favorite'] = Favorite.objects.filter(user=request.user, anime=anime).exists()
    
    return render(request, 'anime.html', context)

@login_required
@require_http_methods(['POST'])
def rate_anime(request):
    """ API –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –∞–Ω–∏–º–µ """
    try:
        data = json.loads(request.body)
        anime_id = data.get('anime_id')
        rating = data.get('rating')
        
        if not anime_id or not rating:
            return JsonResponse({'success': False, 'error': '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ'})
        
        anime = get_object_or_404(Anime, id=anime_id)
        rating_obj, created = Rating.objects.get_or_create(
            user=request.user,
            anime=anime,
            defaults={'rating': rating}
        )
        
        if not created:
            rating_obj.rating = rating
            rating_obj.save()
        
        return JsonResponse({
            'success': True,
            'average_rating': anime.average_rating
        })
    except Exception as e:
        return JsonResponse({'success': False, 'error': str(e)})

@login_required
@require_http_methods(['POST'])
def toggle_favorite(request):
    """ API –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ """
    try:
        data = json.loads(request.body)
        anime_id = data.get('anime_id')
        
        if not anime_id:
            return JsonResponse({'success': False, 'error': '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ'})
        
        anime = get_object_or_404(Anime, id=anime_id)
        favorite, created = Favorite.objects.get_or_create(
            user=request.user,
            anime=anime
        )
        
        if not created:
            favorite.delete()
            message = '–ê–Ω–∏–º–µ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ'
        else:
            message = '–ê–Ω–∏–º–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ'
        
        return JsonResponse({
            'success': True,
            'message': message,
            'is_favorite': created
        })
    except Exception as e:
        return JsonResponse({'success': False, 'error': str(e)})

@login_required
@require_http_methods(['POST'])
def add_comment(request):
    """ API –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è """
    try:
        data = json.loads(request.body)
        anime_id = data.get('anime_id')
        text = data.get('text')
        
        if not anime_id or not text:
            return JsonResponse({'success': False, 'error': '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ'})
        
        anime = get_object_or_404(Anime, id=anime_id)
        comment = Comment.objects.create(
            user=request.user,
            anime=anime,
            text=text
        )
        
        return JsonResponse({
            'success': True,
            'comment': {
                'username': comment.user.username,
                'user_avatar': comment.user.avatar.url if comment.user.avatar else None,
                'text': comment.text,
                'created_at': comment.created_at.isoformat()
            }
        })
    except Exception as e:
        return JsonResponse({'success': False, 'error': str(e)})

@login_required
@require_http_methods(['PUT'])
def edit_comment(request, comment_id):
    """ API –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è """
    try:
        data = json.loads(request.body)
        text = data.get('text')
        
        if not text:
            return JsonResponse({'success': False, 'error': '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ'})
        
        comment = get_object_or_404(Comment, id=comment_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–æ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        if comment.user != request.user:
            return JsonResponse({'success': False, 'error': '–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ'}, status=403)
        
        comment.text = text
        comment.save()
        
        return JsonResponse({
            'success': True,
            'comment': {
                'id': comment.id,
                'username': comment.user.username,
                'user_avatar': comment.user.avatar.url if comment.user.avatar else None,
                'text': comment.text,
                'created_at': comment.created_at.isoformat()
            }
        })
    except Exception as e:
        return JsonResponse({'success': False, 'error': str(e)})

@login_required
@require_http_methods(['DELETE'])
def delete_comment(request, comment_id):
    """ API –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è """
    try:
        comment = get_object_or_404(Comment, id=comment_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–æ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        if comment.user != request.user:
            return JsonResponse({'success': False, 'error': '–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ'}, status=403)
        
        comment.delete()
        
        return JsonResponse({'success': True})
    except Exception as e:
        return JsonResponse({'success': False, 'error': str(e)})

def get_anime_comments(request, anime_id):
    """ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫ –∞–Ω–∏–º–µ """
    try:
        anime = get_object_or_404(Anime, id=anime_id)
        page = int(request.GET.get('page', 1))
        per_page = 10
        
        comments = anime.comments.all()[(page-1)*per_page:page*per_page]
        
        comments_data = [{
            'id': comment.id,
            'username': comment.user.username,
            'user_avatar': comment.user.avatar.url if comment.user.avatar else None,
            'text': comment.text,
            'created_at': comment.created_at.isoformat()
        } for comment in comments]
        
        return JsonResponse({
            'success': True,
            'comments': comments_data,
            'has_more': len(comments) == per_page
        })
    except Exception as e:
        return JsonResponse({'success': False, 'error': str(e)})
